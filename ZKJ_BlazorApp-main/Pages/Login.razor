@page "/login"
@using System.ComponentModel.DataAnnotations
@inject IAuthenticationService AuthenticationService
@inject IUserService UserService
@inject NavigationManager NavigationManager

<div class="col-md-6 offset-md-3 mt-5">
    <div class="alert alert-info">
        Please fill username and password
    </div>
    <div class="card">
        <h4 class="card-header">Hotel Linen Manager</h4>
        <div class="card-body">
            <EditForm Model="@model" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label>Username</label>
                    <InputText @bind-Value="model.Username" class="form-control" />
                    <ValidationMessage For="@(() => model.Username)" />
                </div>
                <div class="form-group">
                    <label>Password</label>
                    <InputText @bind-Value="model.Password" type="password" class="form-control" />
                    <ValidationMessage For="@(() => model.Password)" />
                </div>
                <button class="btn btn-primary">
                    @if (loading)
                    {
                        <span class="spinner-border spinner-border-sm mr-1"></span>
                    }
                    Login
                </button>
                @if (!string.IsNullOrEmpty(error))
                {
                    <div class="alert alert-danger mt-3 mb-0">@error</div>
                }
                <button type="button" class="btn btn-secondary" @onclick="() => Register()">Register</button>
                @*<button type="button" class="btn btn-secondary" @onclick="() => ChangePassword()">Change Password</button>*@
            </EditForm>
        </div>
    </div>
</div>

@*@if (IsVisible == true)
{

    <div class="container">
        <div class="row">
            <div class="col-md-4">
                <EditForm Model="@model">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group">
                        <label for="username" class="control-label">Username: </label>
                        <InputText class="form-control" Id="username" @bind-Value="@model.Username"></InputText>
                    </div>
                    <button type="button" class="btn btn-primary" @onclick="() => NavigateToChangePassword()">
                        Submit
                    </button>
                </EditForm>
            </div>
        </div>
    </div>
}*@



@code {
    private Model model = new Model();
    private bool loading;
    private string error;
    private bool IsVisible { get; set; }
    private int userId;
    private Models.User user = new Models.User();

    protected override void OnInitialized()
    {
        // redirect to home if already logged in
        if (AuthenticationService.User != null)
        {
            NavigationManager.NavigateTo("");
        }
    }

    private async void HandleValidSubmit()
    {
        loading = true;
        try
        {
            await AuthenticationService.Login(model.Username, model.Password);
            var returnUrl = NavigationManager.QueryString("returnUrl") ?? "";
            NavigationManager.NavigateTo(returnUrl);
        }
        catch (Exception ex)
        {
            error = ex.Message;
            loading = false;
            StateHasChanged();
        }
    }

    private void Register()
    {
        NavigationManager.NavigateTo("/register");
    }
    private void ChangePassword()
    {
        IsVisible = true;
    }
    private async Task NavigateToChangePassword()
    {
        user = (await UserService.GetAll(model.Username)).ToList().FirstOrDefault();
        NavigationManager.NavigateTo($"changePassword/{user.Id}");

    }

    private class Model
    {
        [Required]
        public string Username { get; set; }

        [Required]
        public string Password { get; set; }
    }
}