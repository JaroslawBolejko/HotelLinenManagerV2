@page "/relatedComapnies"
@attribute [Authorize]
@inject ICompanyService CompService
@inject IRelatedCompaniesService RelatedCompanyService
@inject ILocalStorageService LocalStorageService
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager

@if (SpinnerVisible == true)
{
    <SfSpinner Visible="true" Type="@SpinnerType.Bootstrap4" Size="100" Label="Data loading"></SfSpinner>
}
@if (ConnectedCompanies != null)
{
    <SfGrid DataSource="@ConnectedCompanies" Toolbar="Toolbaritems">
        <GridEvents OnActionBegin="ActionBeginHandler" TValue="RelatedCompany"></GridEvents>
        <GridFilterSettings Mode="Syncfusion.Blazor.Grids.FilterBarMode.Immediate" Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
        <GridEditSettings Mode="EditMode.Normal" AllowAdding="true" AllowEditing="true" AllowDeleting="true">
        </GridEditSettings>
        <GridColumns>
            <GridColumn Field=Laundry.Name HeaderText="Company Name"></GridColumn>
            <GridColumn Field=Laundry.City HeaderText="City"></GridColumn>
            <GridColumn Field=Laundry.Street HeaderText="Street"></GridColumn>
            <GridColumn Field=Laundry.Number HeaderText="Number"></GridColumn>
            <GridColumn Field=Laundry.TelefonNumber HeaderText="Number"></GridColumn>
            <GridColumn Field=Laundry.EMail HeaderText="EMail"></GridColumn>
            <GridColumn Field=Laundry.TaxNumber HeaderText="TaxNumber"></GridColumn>
        </GridColumns>
    </SfGrid>
}




@code{
    public List<Company> Companies { get; set; }
    public List<Models.RelatedCompany> ConnectedCompanies { get; set; }
    public int CompanyId { get; set; }
    public bool SpinnerVisible { get; set; }
    private List<Object> Toolbaritems = new List<Object>() { "Add", "Delete", "Update", "Cancel" };


    protected override async Task OnInitializedAsync()
    {
        SpinnerVisible = true;
        CompanyId = (await LocalStorageService.GetItem<User>("userData")).CompanyId;
        Companies = (await CompService.GetAll()).ToList();
        // ConnectedCompanies = (await RelatedCompanyService.GetAllRelatedCompanies()).ToList();
        ConnectedCompanies = (await RelatedCompanyService.GetAllRelatedCompanies(CompanyId)).ToList();
        SpinnerVisible = false;

    }

    protected void Back()
    {
        navigationManager.NavigateTo("/");
    }

    public async void ActionBeginHandler(ActionEventArgs<RelatedCompany> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            if (args.Action == "Add")
            {
                await RelatedCompanyService.CreateRelatedCompany(args.Data);

            }
           

        }
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {

        }
    }


}
