@page "/companies"
@attribute [Authorize]
@inject ICompanyService CompService
@inject ILocalStorageService LocalStorageService
@inject IRelatedCompaniesService RelatedCompanyService
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager




@if (SpinnerVisible == true)
{
    <SfSpinner Visible="true" Type="@SpinnerType.Bootstrap4" Size="100" Label="Data loading"></SfSpinner>
}

@if (CompanyList != null)
{
    <SfGrid @ref="companyGrid" DataSource="@CompanyList" Toolbar="CompanyToolbaritems">
        <GridEvents OnActionBegin="ActionBeginHandlerCompany" TValue="Company"></GridEvents>
        <GridFilterSettings Mode="Syncfusion.Blazor.Grids.FilterBarMode.Immediate" Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
        <GridEditSettings Mode="EditMode.Dialog" AllowAdding="true" AllowEditing="true" AllowDeleting="true">
        </GridEditSettings>
        <GridColumns>
            <GridColumn HeaderText="Your Company" TextAlign="TextAlign.Center">
                <GridColumns>
                    <GridColumn Field=@nameof(Company.Name) HeaderText="Name"></GridColumn>
                    <GridColumn Field=@nameof(Company.Type) HeaderText="Type">
                        <EditTemplate>
                            <span>Type</span>
                            <SfDropDownList TItem="string" TValue="Models.CompanyType"
                                            @bind-Value="@((context as Company).Type)"
                                            DataSource="@TypesEnumValues">
                            </SfDropDownList>
                        </EditTemplate>
                    </GridColumn>
                    <GridColumn Field=@nameof(Company.Street) HeaderText="Street"></GridColumn>
                    <GridColumn Field=@nameof(Company.Number) HeaderText="Number"></GridColumn>
                    <GridColumn Field=@nameof(Company.City) HeaderText="City"></GridColumn>
                    <GridColumn Field=@nameof(Company.TaxNumber) HeaderText="TaxNumber"></GridColumn>
                    <GridColumn Field=@nameof(Company.TelefonNumber) HeaderText="Telefon Number"></GridColumn>
                </GridColumns>
            </GridColumn>
        </GridColumns>
    </SfGrid>
}
<br />
@if (RelatedCompanies != null)
{
    <SfGrid @ref="relatedGrid" DataSource="@RelatedCompanies" Toolbar="RelatedToolbaritems">
        <GridEvents OnToolbarClick="ToolbarClickHandler" OnActionBegin="OnActionRelated" CommandClicked="OnCommandClicked" TValue="RelatedCompany"></GridEvents>
        <GridFilterSettings Mode="Syncfusion.Blazor.Grids.FilterBarMode.Immediate" Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
        <GridEditSettings Mode="EditMode.Normal" AllowAdding="false" AllowEditing="false" AllowDeleting="true">
        </GridEditSettings>
        <GridColumns>
            <GridColumn HeaderText="Related Companies" TextAlign="TextAlign.Center">
                <GridColumns>
                    <GridColumn Field=Laundry.Name HeaderText="Company Name"></GridColumn>
                    <GridColumn Field=Laundry.City HeaderText="City"></GridColumn>
                    <GridColumn Field=Laundry.Street HeaderText="Street"></GridColumn>
                    <GridColumn Field=Laundry.Number HeaderText="Number"></GridColumn>
                    <GridColumn Field=Laundry.TelefonNumber HeaderText="Telefon Number"></GridColumn>
                    <GridColumn Field=Laundry.EMail HeaderText="EMail"></GridColumn>
                    <GridColumn Field=Laundry.TaxNumber HeaderText="TaxNumber"></GridColumn>
                    <GridColumn Field="@nameof(RelatedCompany.CompanyId)" HeaderText="CompId" Width="0"></GridColumn>
                    <GridColumn Field="@nameof(RelatedCompany.LaundryId)" HeaderText="LaundryId" Width="0"></GridColumn>
                    <GridColumn HeaderText="Actions">
                        <GridCommandColumns>
                            <GridCommandColumn ButtonOption="@(new CommandButtonOptions()
                                                   { Content = "Price List", CssClass = "e-flat" })"></GridCommandColumn>
                        </GridCommandColumns>
                    </GridColumn>
                </GridColumns>
            </GridColumn>
        </GridColumns>
    </SfGrid>
}

<div class="add">
    <SfDialog @bind-Visible="@IsVisible" ShowCloseIcon="true" Width="300px" IsModal="true">
        <DialogTemplates>
            <Header>Add Company</Header>
            <Content>
                <EditForm Model="@newCompany" OnValidSubmit="HandleValidSubmit">
                    <div class="dialogForm">
                        <form>
                            <label for="taxNumber">TaxNumber:</label>
                            <input @bind-value="newCompany.TaxNumber" type="text" id="taxNumber" name="taxNumber" placeholder="Company Tax number..">

                            <label for="email">E-mail:</label>
                            <input @bind-value="newCompany.EMail" type="text" id="email" name="email" placeholder="Company e-mail..">

                            <label for="telNumber">Last Name:</label>
                            <input @bind-value="newCompany.TelefonNumber" type="text" id="telNumber" name="telefonNumber" placeholder="Company telefon number..">
                        </form>
                    </div>
                </EditForm>
            </Content>
        </DialogTemplates>
        <DialogButtons>
            <DialogButton CssClass="dialogButton" Content="Submit" IsPrimary="true" OnClick="@OnClick" />
            <DialogButton CssClass="dialogButton" Content="Cancel" OnClick="@Cancel" />
        </DialogButtons>
    </SfDialog>
</div>
@code {


    private List<Object> CompanyToolbaritems = new List<Object>() { "Edit", "Update", "Cancel" };
    private List<Object> RelatedToolbaritems = new List<Object>() {new ItemModel()
    { Align = (Syncfusion.Blazor.Navigations.ItemAlign.Left), Text = "Add Company",
        TooltipText = "Add", Id = "Add"}, "Delete" };
    public bool SpinnerVisible { get; set; }
    private List<RelatedCompany> RelatedCompanies { get; set; }
    private SfGrid<Company> companyGrid { get; set; }
    private SfGrid<RelatedCompany> relatedGrid { get; set; }
    private int CompanyId { get; set; }
    private int relatedLaundryId;
    public int RelationId { get; set; }

    private List<Company> CompanyList { get; set; }
    private DialogSettings DialogParams = new DialogSettings { Width = "450px", Height = "550px" };
    private Company newCompany = new Company();
    private RelatedCompany newRelation = new RelatedCompany();
    private bool IsVisible { get; set; }
    public string[] TypesEnumValues = Enum.GetNames(typeof(Models.CompanyType));




    protected override async Task OnInitializedAsync()
    {
        SpinnerVisible = true;
        CompanyId = (await LocalStorageService.GetItem<User>("userData")).CompanyId;
        CompanyList = (await CompService.GetAll(CompanyId)).ToList();
        RelatedCompanies = (await RelatedCompanyService.GetAllRelatedCompanies(CompanyId)).ToList();

        SpinnerVisible = false;
    }


    public async void ActionBeginHandlerCompany(ActionEventArgs<Company> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {

            if (args.Action == "Edit")
            {
                await CompService.Update(args.Data);
                CompanyList = (await CompService.GetAll(CompanyId)).ToList();
                companyGrid.Refresh();
            }

        }
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            await CompService.Delete(args.Data.Id);
        }
    }
    //bez metody onaction nie działa gridrefresh... zostawić deleta tu chociaż może edit teżprzejdzie
    public async void OnActionRelated(ActionEventArgs<RelatedCompany> args)
    {

        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            await RelatedCompanyService.DeleteRelatedCompany(args.Data.Id);
            RelatedCompanies = (await RelatedCompanyService.GetAllRelatedCompanies(CompanyId)).ToList();
            relatedGrid.Refresh();
        }
    }


    public void OnCommandClicked(CommandClickEventArgs<RelatedCompany> args)
    {

        if (args.CommandColumn.ButtonOption.Content == "Price List")
        {
            navigationManager.NavigateTo($"/priceLists/{args.RowData.LaundryId}");
        }

    }

    public void ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs selectArgs)
    {
        if (selectArgs.Item.Id == "Add")
        {
            this.IsVisible = true;

        }
    }
    private void Cancel()
    {
        this.IsVisible = false;
    }
    private async Task OnClick()
    {
        this.IsVisible = false;
        SpinnerVisible = true;
        newCompany.Type = (CompanyType)2;
        newCompany.Name = "";
        newCompany.Street = "";
        newCompany.Number = "";
        newCompany.ApartmentNumber = "";
        newCompany.ZipCode = "";
        newCompany.City = "";

        var laundry = (await CompService.GetAll(newCompany.TaxNumber)).ToList();
        if (laundry.Count == 0)
        {
            relatedLaundryId = await CompService.Create(newCompany);
            newRelation.CompanyId = CompanyId;
            newRelation.LaundryId = relatedLaundryId;
            await RelatedCompanyService.CreateRelatedCompany(newRelation);
        }
        else
        {
            int laundryId = laundry.Select(x => x.Id).FirstOrDefault();
            newRelation.CompanyId = CompanyId;
            newRelation.LaundryId = laundryId;
            await RelatedCompanyService.CreateRelatedCompany(newRelation);
        }

        RelatedCompanies = (await RelatedCompanyService.GetAllRelatedCompanies(CompanyId)).ToList();
        relatedGrid.Refresh();
        SpinnerVisible = false;

    }
    private void HandleValidSubmit()
    {
        Console.WriteLine("OnValidSubmit");
    }

}
<style>
    .add {
        min-height: 400px;
        height: 100%;
        position: relative;
    }

    input[type=text], select {
        width: 100%;
        padding: 12px 20px;
        margin: 8px 0;
        display: inline-block;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-sizing: border-box;
    }


    .dialogButton {
        align-content: center;
        text-align: center;
    }

    .e-toolbar-item .e-tbar-btn {
        border: solid;
    }
</style>
