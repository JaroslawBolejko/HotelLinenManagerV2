@page "/changePassword/{Id}"
@inject IUserService UserService
@inject ILocalStorageService LocalStorageService
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager


<h3>ChangePassword</h3>

@if (SpinnerVisible == true)
{
    <SfSpinner Visible="true" Type="@SpinnerType.Bootstrap4" Size="100" Label="Data loading"></SfSpinner>
}

<div class="container">
    <div class="row">
        <div class="col-md-4">
            <EditForm Model="@user" >
                <DataAnnotationsValidator />
                <ValidationSummary />

                <label for="Password" class="control-label">Password</label>
                <InputText type="password" id="Password" class="form-control" @bind-Value="@user.Password" placeholder="password" />

                <label for="confirmPassword" class="control-label">Confirm Password</label>
                <InputText type="password" id="confirmPassword" class="form-control" @bind-Value="@user.ConfirmPassword" placeholder="Confirm Pasword" />
                <ValidationMessage For="@(() => user.ConfirmPassword)" />
                
                <button type="button" class="btn btn-primary" @onclick="()=> Submit()">
                    Submit
                </button>
                <button type="button" class="btn btn-secondary" @onclick="() => Ok()">
                    Cancel
                </button>
            </EditForm>
        </div>
    </div>
</div>


<div class="dialog">
    <SfDialog @bind-Visible="@IsVisible" ShowCloseIcon="true" Width="auto" IsModal="true">
        <DialogTemplates>
            <Header>Register</Header>
            <Content>
                You have successfully changed your password!
            </Content>
        </DialogTemplates>
        <DialogButtons>
            <DialogButton CssClass="dialogButton" Content="Ok" IsPrimary="true" OnClick="@Ok" />
        </DialogButtons>
    </SfDialog>
</div>


@code{
    [Parameter]
    public string Id { get; set; }
    private bool SpinnerVisible { get; set; }
    private bool IsVisible { get; set; }
    private User UserPassword { get; set; }
    private User User = new User();
    Move user = new Move();

    protected override async Task OnInitializedAsync()
    {
        SpinnerVisible = true;
        UserPassword = await LocalStorageService.GetItem<User>("userData");
        SpinnerVisible = false;
    }
    private async Task Submit()
    {
        SpinnerVisible = true;
        UserPassword.Password = user.Password;
        User.AuthData = $"{UserPassword.Username}:{UserPassword.Password}".EncodeBase64();
        await UserService.UpdateUserById(UserPassword);

        await LocalStorageService.RemoveItem("user");
        await LocalStorageService.SetItem("user", User);

        await LocalStorageService.RemoveItem("userData");
        await LocalStorageService.SetItem("userData", UserPassword);
        SpinnerVisible = false;
        IsVisible = true;

    }
    private void Ok()
    {
        navigationManager.NavigateTo("Users");
    }
}