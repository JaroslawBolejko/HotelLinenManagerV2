@page "/priceLists/{Id}"
@attribute [Authorize]
@inject IPriceListService PriceListService
@inject IPriceListDetailsService PriceListDetailsService
@inject ILocalStorageService LocalStorageService
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager

@if (SpinnerVisible == true)
{
    <SfSpinner Visible="true" Type="@SpinnerType.Bootstrap4" Size="100" Label="Data loading"></SfSpinner>
}
@if (PriceIndex != null)
{
    <SfGrid @ref="priceListGrid" DataSource="PriceIndex" AllowSorting="true" AllowFiltering="true" Toolbar="Toolbaritems">
        <GridEvents OnToolbarClick="ToolbarClickHandler" OnActionBegin="ActionBeginHandler" CommandClicked="OnCommandClicked"
                    QueryCellInfo="CustomizeCell" TValue="PriceList"></GridEvents>
        <GridPageSettings PageSize="10" PageCount="5" PageSizes="pagerDropDown"></GridPageSettings>
        <GridFilterSettings Mode="Syncfusion.Blazor.Grids.FilterBarMode.Immediate" Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
        <GridEditSettings Mode="EditMode.Dialog" AllowAdding="true" AllowEditing="true" AllowDeleting="true"></GridEditSettings>
        <GridColumns>
            <GridColumn HeaderText="Price Lists" TextAlign="TextAlign.Center">
                <GridColumns>
                    <GridColumn Field=@nameof(PriceList.Name) HeaderText="Name"></GridColumn>
                    <GridColumn Field=@nameof(PriceList.Number) HeaderText="Number"></GridColumn>
                    <GridColumn Field=@nameof(PriceList.CreationDate) Format="d" HeaderText="Date od creation"></GridColumn>
                    <GridColumn Field="Laundry.Name" HeaderText="Laundry Name"></GridColumn>
                    <GridColumn Field="@nameof(PriceList.IsCurrent)" HeaderText="Current Price List" EditType="EditType.BooleanEdit"></GridColumn>
                    <GridColumn HeaderText="Actions" Width="110">
                        <GridCommandColumns>
                            <GridCommandColumn ButtonOption="@(new CommandButtonOptions()
                                                               { Content = "Show Details", CssClass = "e-flat" })"></GridCommandColumn>
                        </GridCommandColumns>
                    </GridColumn>
                </GridColumns>
            </GridColumn>
        </GridColumns>
    </SfGrid>
}

<div class="add">
    <SfDialog @bind-Visible="@IsVisible" ShowCloseIcon="true" Width="300px" IsModal="true">
        <DialogTemplates>
            <Header>Add Price List</Header>
            <Content>
                <EditForm Model="newPriceList">
                    <div class="dialogForm">
                        <form>
                            <label for="taxNumber">TaxNumber:</label>
                            <input type="text" id="taxNumber" name="taxNumber" placeholder="Company Tax number..">

                            <div class="form-check">
                                <input type="checkbox" class="form-check-input" id="exampleCheck1">
                                <label class="form-check-label" for="exampleCheck1">Check me out</label>
                            </div>
                        </form>
                    </div>

                </EditForm>
            </Content>
        </DialogTemplates>
        <DialogButtons>
            <DialogButton CssClass="dialogButton" Content="Submit" IsPrimary="true" OnClick="@OnClick" />
            <DialogButton CssClass="dialogButton" Content="Cancel" OnClick="@Cancel" />
        </DialogButtons>
    </SfDialog>
</div>

@code {
    private List<Models.PriceList> PriceIndex { get; set; }
    private int CompanyId { get; set; }
    private SfGrid<Models.PriceList> priceListGrid { get; set; }
    private List<Object> Toolbaritems = new List<Object>() {new ItemModel(){ Align = (Syncfusion.Blazor.Navigations.ItemAlign.Left), Text = "Add Company",
        TooltipText = "Add", Id = "Add"},"Edit", "Delete", "Update", "Cancel",
    new ItemModel() {CssClass="back", Align = (Syncfusion.Blazor.Navigations.ItemAlign.Right),
        Text = "Back", TooltipText = "Back", Id = "Back" } };
    string[] pagerDropDown = new string[] { "All", "5", "10", "15", "20" };
    public bool SpinnerVisible { get; set; }
    [Parameter]
    public string Id { get; set; }
    private int LaundryId { get; set; }
    private bool IsVisible { get; set; }
    private PriceListDetails newPriceList = new PriceListDetails();
    public string[] TypesEnumValues = Enum.GetNames(typeof(Models.Type));




    protected override async Task OnInitializedAsync()
    {
        SpinnerVisible = true;
        CompanyId = (await LocalStorageService.GetItem<User>("userData")).CompanyId;
        PriceIndex = (await PriceListService.GetAllPriceLists(CompanyId, int.Parse(Id))).ToList();
        SpinnerVisible = false;
    }

    public async void ActionBeginHandler(ActionEventArgs<PriceList> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {

            if (args.Action == "Add")
            {
                await PriceListService.CreatePriceList(args.Data);
                priceListGrid.Refresh();
            }
            if (args.Action == "Edit")
            {
                await PriceListService.UpdatePriceList(args.Data);
                priceListGrid.Refresh();
            }

        }
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            await PriceListService.Delete(args.Data.Id);
        }

    }
    public async Task OnCommandClicked(CommandClickEventArgs<PriceList> args)
    {

        if (args.CommandColumn.ButtonOption.Content == "Show Details")
        {
            LaundryId = args.RowData.Id;
            await LocalStorageService.SetItem<int>("laundryId", LaundryId);

            navigationManager.NavigateTo($"/priceListDetails/{LaundryId}");
        }

    }

    public void ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "Add")
        {
            IsVisible = true;
        }

        if (args.Item.Id == "Back")
        {
            navigationManager.NavigateTo($"/companies");
        }

    }

    public void CustomizeCell(QueryCellInfoEventArgs<PriceList> args)
    {
        if (args.Column.Field == "IsCurrent")
        {
            if (args.Data.IsCurrent == true)
            {
                args.Cell.AddClass(new string[] { "true" });
            }
            else
            {
                args.Cell.AddClass(new string[] { "false" });

            }
        }

    }
    private void Cancel()
    {
        this.IsVisible = false;
    }
    private async Task OnClick()
    {

    }
}
<style>
    .add {
        min-height: 400px;
        height: 100%;
        position: relative;
    }

    input[type=text], select {
        width: 100%;
        padding: 12px 20px;
        margin: 8px 0;
        display: inline-block;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-sizing: border-box;
    }

    .dialogButton {
        align-content: center;
        text-align: center;
    }

    .true {
        background-color: lightgreen;
    }

    .back.e-toolbar-item .e-tbar-btn {
        border: solid;
        background-color: orange;
    }
</style>
