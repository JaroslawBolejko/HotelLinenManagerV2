@page "/priceListDetails/{Id}"
@inject IPriceListDetailsService PriceListDetailsService
@inject ILocalStorageService LocalStorageService
@inject IHotelLinenService HotelLinenService
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager

@if (SpinnerVisible == true)
{
    <SfSpinner Visible="true" Type="@SpinnerType.Bootstrap4" Size="100" Label="Data loading"></SfSpinner>
}
@if (PriceIndexDetails != null)
{
    <SfGrid ID="Grid" @ref="detailGrid" DataSource="PriceIndexDetails" AllowSorting="true" AllowFiltering="true" Toolbar="Toolbaritems">
        <GridEvents OnToolbarClick="ToolbarClickHandler" OnActionBegin="ActionBeginHandler" TValue="PriceListDetail"></GridEvents>
        <GridPageSettings PageSize="10" PageCount="5" PageSizes="pagerDropDown"></GridPageSettings>
        <GridFilterSettings Mode="Syncfusion.Blazor.Grids.FilterBarMode.Immediate" Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
        <GridEditSettings Mode="EditMode.Dialog" AllowAdding="true" AllowEditing="true" AllowDeleting="true" 
                          Dialog="DialogParams"></GridEditSettings>
        <GridColumns>
            <GridColumn HeaderText="Price List Details" TextAlign="TextAlign.Center">
                <GridColumns>
                    <GridColumn Field="HotelLinen.TypeName" HeaderText="Description"></GridColumn>
                    <GridColumn Field="HotelLinen.Description" HeaderText="Description"></GridColumn>
                    <GridColumn Field=@nameof(PriceListDetail.PricePerKg) HeaderText="Price per kg(zł)"></GridColumn>
                    <GridColumn Field=@nameof(PriceListDetail.TaxValue) HeaderText="Tax value(%)"></GridColumn>
                </GridColumns>
            </GridColumn>
        </GridColumns>
    </SfGrid>
}



@code {
    [Parameter]
    public string Id { get; set; }
    private List<Models.PriceListDetail> PriceIndexDetails { get; set; }
    private bool SpinnerVisible { get; set; }
    private SfGrid<Models.PriceListDetail> detailGrid { get; set; }
    private List<Object> Toolbaritems = new List<Object>() { "Add", "Edit", "Delete", "Update", "Cancel",
    new ItemModel() {CssClass="back", Align = (Syncfusion.Blazor.Navigations.ItemAlign.Right), Text = "Back", TooltipText = "Back", Id = "Back" } };
    string[] pagerDropDown = new string[] { "All", "5", "10", "15", "20" };
    private int BackPageId { get; set; }
    private DialogSettings DialogParams = new DialogSettings { Width = "450px", Height = "550px" };


    protected override async Task OnInitializedAsync()
    {
        SpinnerVisible = true;
        PriceIndexDetails = (await PriceListDetailsService.GetAllPriceDetails(int.Parse(Id))).ToList();
        BackPageId = await LocalStorageService.GetItem<int>("laundryId");
        await LocalStorageService.RemoveItem("laundryId");
        SpinnerVisible = false;
    }
    public async void ActionBeginHandler(ActionEventArgs<PriceListDetail> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {

            if (args.Action == "Add")
            {
                await PriceListDetailsService.CreatePriceDetail(args.Data);
                detailGrid.Refresh();
            }
            if (args.Action == "Edit")
            {
                await PriceListDetailsService.UpdatePriceDetail(args.Data);
                detailGrid.Refresh();
            }

        }
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            await PriceListDetailsService.Delete(args.Data.Id);
        }

    }


    public void ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {

        if (args.Item.Id == "Back")
        {
            navigationManager.NavigateTo($"/priceLists/{BackPageId}");
        }

    }

}
<style>
    div#Grid_dialogEdit_wrapper {
        max-height: none !important;
    }
    .back.e-toolbar-item .e-tbar-btn {
        border: solid;
        background-color: orange;
    }
</style>