@page "/laundryservices"
@attribute [Authorize]
@inject ILaundryServiceService LaundryServiceService
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Buttons

<h3>Lanudry Service</h3>

@if (Loading)
{
    <div class="spinner-border spinner-border-sm"></div>
}
@if (Laundries != null)
{
    <SfGrid DataSource="@Laundries" AllowPaging="true" AllowSorting="true">
        <GridPageSettings PageSize="10" PageCount="5" PageSizes="@pagerDropdown"></GridPageSettings>
        <GridEvents QueryCellInfo="CustomizeCell" TValue="LaundryService"></GridEvents>
        <GridColumns>
            <GridColumn Field=@nameof(LaundryService.Id) HeaderText="ID"></GridColumn>
            <GridColumn Field=@nameof(LaundryService.Name) HeaderText="Service Name"></GridColumn>
            <GridColumn Field=@nameof(LaundryService.Number) HeaderText="Number"></GridColumn>
            <GridColumn Field=@nameof(LaundryService.RecievedDate) Format="d" HeaderText="Recieved Date" Type="ColumnType.Date"></GridColumn>
            <GridColumn Field=@nameof(LaundryService.IssuedDate) Format="d" HeaderText="Issued Date" Type="ColumnType.Date">
                <Template>
                    @{
                        var con = context as LaundryService;
                        if (con.IssuedDate == null)
                        {
                            <span>Laundry in progress...</span>

                        }
                        else
                        {
                            <span>@(String.Format("{0:d}", con.IssuedDate))</span>

                        }
                    }
                </Template>
            </GridColumn>
            <GridColumn Field=@nameof(LaundryService.IsFinished) HeaderText="Is Finished"></GridColumn>
        </GridColumns>
    </SfGrid>
}

@code{
    bool Loading;
    public List<Models.LaundryService> Laundries;
    SfButton EditBtnResolved;

    string[] pagerDropdown = new string[] { "All", "5", "10", "15", "20" };

    protected override async Task OnInitializedAsync()
    {
        Loading = true;
        Laundries = (await LaundryServiceService.GetAllLaundry()).OrderByDescending(x => x.RecievedDate).ToList();
        Loading = false;
    }
    public void onToggleClick_Resolved() { }

    public void CustomizeCell(QueryCellInfoEventArgs<LaundryService> args)
    {
        if (args.Column.Field == "IsFinished")
        {
            if (args.Data.IsFinished == true)
            {
                args.Cell.AddClass(new string[] { "true" });
            }
            else
            {
                args.Cell.AddClass(new string[] { "false" });

            }
        }

    }
}

<style>
    .true {
        background-color: lawngreen;
    }

    .false {
        background-color: orangered;
    }
</style>


