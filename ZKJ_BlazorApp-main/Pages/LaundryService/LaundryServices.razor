@page "/laundryservices"
@attribute [Authorize]
@inject ILaundryServiceService LaundryServiceService
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager



<h3>Lanudry Service</h3>

@if (SpinnerVisible == true)
{
    <SfSpinner Visible="true" Type="@SpinnerType.Bootstrap4" Size="100" Label="Data loading"></SfSpinner>
}

@if (Laundries != null)
{
    <SfGrid DataSource="@Laundries" AllowPaging="true" AllowSorting="true" AllowFiltering="true" Toolbar="Toolbaritems">
        <GridEvents OnToolbarClick="ToolbarClickHandler" RowSelected="RowSelectHandler" QueryCellInfo="CustomizeCell"
                    OnActionBegin="ActionBeginHandler" TValue="LaundryService"></GridEvents>
        <GridPageSettings PageSize="10" PageCount="5" PageSizes="@pagerDropdown"></GridPageSettings>
        <GridFilterSettings Mode="FilterBarMode.Immediate" Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
        <GridEditSettings AllowEditing="true" AllowDeleting="true"></GridEditSettings>
        <GridTemplates>
            <DetailTemplate>
                @{
                    var service = (context as LaundryService);
                    <table class="detailtable">
                        <tbody>
                            <tr>
                                <td>
                                    <span style="font-weight: 500;"><b>Total Netto: </b></span> @service.TotalNetto (zł)
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <span style="font-weight: 500;"><b>Total Brutto: </b></span> @service.TotalBrutto (zł)
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <span style="font-weight: 500;"><b>Total Tax: </b></span> @service.TotalTax (zł)
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <span style="font-weight: 500;"><b>Total Weight: </b></span> @service.TotalServiceWeight (kg)
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <span style="font-weight: 500;"><b>Total Brutto: </b></span> @service.TotalBrutto (zł)
                                </td>
                            </tr>
                        </tbody>
                    </table>
                }
            </DetailTemplate>
        </GridTemplates>
        <GridColumns>
            <GridColumn IsPrimaryKey="true" Field=@nameof(LaundryService.Id) HeaderText="ID" Visible="false"></GridColumn>
            <GridColumn Field=Laundry.Name HeaderText="Laundry Name"></GridColumn>
            <GridColumn Field=Company.Name HeaderText="Client Name"></GridColumn>
            <GridColumn Field=@nameof(LaundryService.Number) HeaderText="Number"></GridColumn>
            <GridColumn Field=@nameof(LaundryService.RecievedDate) Format="d" HeaderText="Recieved Date" Type="ColumnType.Date"></GridColumn>
            <GridColumn Field=@nameof(LaundryService.IssuedDate) Format="d" HeaderText="Issued Date" Type="ColumnType.Date">
                <Template>
                    @{
                        var con = context as LaundryService;
                        if (con.IssuedDate == null)
                        {
                            <span>Laundry in progress...</span>

                        }
                        else
                        {
                            <span>@(String.Format("{0:d}", con.IssuedDate))</span>

                        }
                    }
                </Template>
            </GridColumn>
            <GridColumn Field="@nameof(LaundryService.IsFinished)" EditType="EditType.BooleanEdit" HeaderText="Is Finished">
            </GridColumn>
        </GridColumns>
    </SfGrid>
}
<br />
<h6>*For data sorting, click on the proper tabele header.</h6>
<h6>*For data filtering, click on the filter icon, Choose a method. To remove filter - click clear button.</h6>

@code{
    public List<Models.LaundryService> Laundries { get; set; }
    string[] pagerDropdown = new string[] { "All", "5", "10", "15", "20" };
    private List<Object> Toolbaritems = new List<Object>() { "Edit", "Delete", "Update", "Cancel",
        new ItemModel() {CssClass="specyfic", Align = (Syncfusion.Blazor.Navigations.ItemAlign.Right),
            Text = "View Details", TooltipText = "View", Id = "View" } };
    public int Id { get; set; }
    private bool SpinnerVisible { get; set; }

    protected override async Task OnInitializedAsync()
    {
        SpinnerVisible = true;
        Laundries = (await LaundryServiceService.GetAllLaundry()).OrderByDescending(x => x.RecievedDate).ToList();
        SpinnerVisible = false;
    }
    public void RowSelectHandler(RowSelectEventArgs<LaundryService> args)
    {
        Id = args.Data.Id;
    }
    public void ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "View")
        {
            if (Id == 0)
            {
                navigationManager.NavigateTo($"/laundryservices");
            }
            else
            {
                navigationManager.NavigateTo($"/viewLaudryServiceDetails/{Id}");

            }
        }

    }

    public async void ActionBeginHandler(ActionEventArgs<LaundryService> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {

            if (args.Action == "Edit")
            {
                await LaundryServiceService.UpdateLaundry(args.Data);
            }

        }
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            await LaundryServiceService.Delete(args.Data.Id);
        }
    }


    public void CustomizeCell(QueryCellInfoEventArgs<LaundryService> args)
    {
        if (args.Column.Field == "IsFinished")
        {
            if (args.Data.IsFinished == true)
            {
                args.Cell.AddClass(new string[] { "true" });
            }
            else
            {
                args.Cell.AddClass(new string[] { "false" });

            }
        }

    }

}

<style>
    .true {
        background-color: lawngreen;
    }

    .false {
        background-color: orangered;
    }

    .specyfic.e-toolbar-item .e-tbar-btn {
        background-color: orange;
    }

    .e-toolbar-item .e-tbar-btn {
        border: solid;
    }
</style>


