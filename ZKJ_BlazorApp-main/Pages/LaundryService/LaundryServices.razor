@page "/laundryservices"
@attribute [Authorize]
@inject ILaundryServiceService LaundryServiceService
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Navigations
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager


<h3>Lanudry Service</h3>

@if (Loading)
{
    <div class="spinner-border spinner-border-sm"></div>
}
@if (Laundries != null)
{
    <SfGrid DataSource="@Laundries" AllowPaging="true" AllowSorting="true" AllowFiltering="true" Toolbar="Toolbaritems">
        <GridEvents OnToolbarClick="ToolbarClickHandler" RowSelected="RowSelectHandler" QueryCellInfo="CustomizeCell"
                    OnActionBegin="ActionBeginHandler" TValue="LaundryService"></GridEvents>
        <GridPageSettings PageSize="10" PageCount="5" PageSizes="@pagerDropdown"></GridPageSettings>
        <GridFilterSettings Mode="FilterBarMode.Immediate" Type="FilterType.Menu"></GridFilterSettings>
        <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true"></GridEditSettings>

        <GridColumns>
            <GridColumn AllowAdding="false" IsPrimaryKey="true" Field=@nameof(LaundryService.Id) HeaderText="ID" Visible="false"></GridColumn>
            <GridColumn AllowAdding="false" Field=@nameof(LaundryService.Name) HeaderText="Service Name"></GridColumn>
            <GridColumn AllowAdding="false" Field=@nameof(LaundryService.Number) HeaderText="Number"></GridColumn>
            <GridColumn AllowAdding="false" Field=@nameof(LaundryService.RecievedDate) Format="d" HeaderText="Recieved Date" Type="ColumnType.Date"></GridColumn>
            <GridColumn AllowAdding="false" Field=@nameof(LaundryService.IssuedDate) Format="d" HeaderText="Issued Date" Type="ColumnType.Date">
                <Template>
                    @{
                        var con = context as LaundryService;
                        if (con.IssuedDate == null)
                        {
                            <span>Laundry in progress...</span>

                        }
                        else
                        {
                            <span>@(String.Format("{0:d}", con.IssuedDate))</span>

                        }
                    }
                </Template>
            </GridColumn>
            <GridColumn AllowAdding="false"Field="@nameof(LaundryService.IsFinished)" HeaderText="Is Finished">
            </GridColumn>
        </GridColumns>
    </SfGrid>
}
<br />
<h6>*For data sorting, click on the proper tabele header.</h6>
<h6>*For data filtering, click on the filter icon, Choose a method. To remove filter - click clear button.</h6>

@code{
    bool Loading;
    public List<Models.LaundryService> Laundries { get; set; }

    string[] pagerDropdown = new string[] { "All", "5", "10", "15", "20" };

    private List<Object> Toolbaritems = new List<Object>() { "Add", "Edit", "Delete", "Update", "Cancel", new ItemModel() { Text = "View Details", TooltipText = "View", PrefixIcon = "e-click", Id = "View" } };

    public int Id { get; set; }
    protected override async Task OnInitializedAsync()
    {
        Loading = true;
        Laundries = (await LaundryServiceService.GetAllLaundry()).ToList();
        Loading = false;
    }
    public void RowSelectHandler(RowSelectEventArgs<LaundryService> args)
    {
        Id = args.Data.Id;
    }
    public void ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {

        if (args.Item.Id == "View")
        {

            navigationManager.NavigateTo($"/viewLaudryServiceDetails/{Id}");
        }
    }

    public async void ActionBeginHandler(ActionEventArgs<LaundryService> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            if (args.Action == "Add")
            {
                var lastNum = Laundries.OrderByDescending(x => x.Id).Select(x => x.Number).First();
                var companyId = Laundries.Select(x => x.CompanyId).First();

                var newService = new LaundryService()
                {
                    Id = 0,
                    CompanyId = companyId,
                    Name = "Usługa Prania",
                    Number = args.Data.Number = DocumentNumerCreator(lastNum),
                    RecievedDate = DateTime.Now,
                    IssuedDate = null,
                    IsFinished = false
                };


                await LaundryServiceService.CreateLaundry(newService);
            }
            else
            {
                await LaundryServiceService.UpdateLaundry(args.Data);
            }

        }
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            await LaundryServiceService.Delete(args.Data.Id);
        }
    }
    protected string DocumentNumerCreator(string str)
    {
        StringBuilder sb = new StringBuilder();
        string docNumber;
        int number = 0;
        if (str == null)
        {
            docNumber = "1";
        }
        else
        {
            var tab = str.Split("/", StringSplitOptions.RemoveEmptyEntries);
            number = int.Parse(tab[0]) + 1;
            docNumber = number.ToString();

        }
        string date = DateTime.Now.ToString("MM/yyyy").Replace(".", "/");

        return sb.Append(docNumber).Append('/').Append(date).ToString();

    }
    public void CustomizeCell(QueryCellInfoEventArgs<LaundryService> args)
    {
        if (args.Column.Field == "IsFinished")
        {
            if (args.Data.IsFinished == true)
            {
                args.Cell.AddClass(new string[] { "true" });
            }
            else
            {
                args.Cell.AddClass(new string[] { "false" });

            }
        }

    }
}

<style>
    .true {
        background-color: lawngreen;
    }

    .false {
        background-color: orangered;
    }
</style>


