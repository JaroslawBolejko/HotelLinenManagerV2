@page "/viewLaudryServiceDetails/{Id}"
@attribute [Authorize]
@inject ILaundryServiceDetailsService LaundryServiceDetailsService
@inject IWarehauseDetailsService WarehauseDetailsService
@inject IWarehauseService WarehauseService
@inject ILaundryServiceService LaundryServiceService
@inject IInvoiceService InvoiceService
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager

<h3>Laundry Service Details</h3>

@if (SpinnerVisible == true)
{
    <SfSpinner Visible="true" Type="@SpinnerType.Bootstrap4" Size="100" Label="Data loading"></SfSpinner>
}

@if (LaundryDetails != null)
{
    <SfGrid DataSource="@LaundryDetails" AllowPaging="true" AllowSorting="true" AllowFiltering="true" Toolbar="Toolbaritems">
        <GridEvents OnActionBegin="ActionBeginHandler" OnToolbarClick="ToolbarClickHandler" RowSelected="RowSelectHandler" TValue="LaundryServiceDetail"></GridEvents>
        <GridPageSettings PageSize="10" PageCount="5" PageSizes="@pagerDropdown"></GridPageSettings>
        <GridFilterSettings Mode="FilterBarMode.Immediate" Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
        <GridEditSettings AllowEditing="true" AllowDeleting="true"></GridEditSettings>
        <GridTemplates>
            <DetailTemplate>
                @{
                    var detail = (context as LaundryServiceDetail);
                    <table class="detailtable">
                        <tbody>
                            <tr>
                                <td>
                                    <span style="font-weight: 500;"><b>Total Weight: </b></span> @detail.TotalWeight (kg)
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <span style="font-weight: 500;"><b>Price Per Kg: </b></span> @detail.PricePerKg (zł)
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <span style="font-weight: 500;"><b>Tax Valued: </b></span> @detail.TaxValue (%)
                                </td>
                            </tr>
                        </tbody>
                    </table>
                }
            </DetailTemplate>
        </GridTemplates>
        <GridColumns>
            <GridColumn IsPrimaryKey="true" Field=@nameof(LaundryServiceDetail.Id) HeaderText="ID" Visible="false"></GridColumn>
            <GridColumn AllowEditing="false" Field=@nameof(LaundryServiceDetail.HotelLinenType) HeaderText="Linen Type"></GridColumn>
            <GridColumn AllowEditing="false" Field=@nameof(LaundryServiceDetail.HotelLinenName) HeaderText="Description"></GridColumn>
            <GridColumn AllowEditing="false" Field=@nameof(LaundryServiceDetail.Color) HeaderText="Color"></GridColumn>
            <GridColumn Field="@nameof(LaundryServiceDetail.Amount)" HeaderText="Amount"></GridColumn>
        </GridColumns>
    </SfGrid>


    <div class="dialog">
        <SfDialog @bind-Visible="@IsVisible" ShowCloseIcon="true" Width="auto" IsModal="true">
            <DialogTemplates>
                <Header>Invoice</Header>
                <Content>
                    Would you like to create an invoice?
                </Content>
            </DialogTemplates>
            <DialogButtons>
                <DialogButton CssClass="dialogButton" Content="Create an Invoice" IsPrimary="true" OnClick="@CreateAnInvoice" />
                <DialogButton CssClass="dialogButton" Content="No, I will do that later" OnClick="@Cancel" />
            </DialogButtons>
        </SfDialog>
    </div>
}


@code {

        [Parameter]
        public string Id { get; set; }
    public bool SpinnerVisible { get; set; }
    private IEnumerable<LaundryServiceDetail> LaundryDetails { get; set; }
    private WarehauseDetail cleanLaundry;
    private Warehause warehause = new Warehause();
    private LaundryService LaundryService { get; set; }
    private int warehauseItemAmount;
    private int warehauseDetailID;
    private Invoice Invoice { get; set; }

    public int DetailId { get; set; }
    public bool IsVisible { get; set; }

    private List<Object> Toolbaritems = new List<Object>() { "Edit", "Delete", "Update", "Cancel",
        new ItemModel() {CssClass="specyfic", Align = (Syncfusion.Blazor.Navigations.ItemAlign.Right), Text = "Close the service", TooltipText = "Close", Id = "Close" },
        new ItemModel() {CssClass="specyfic", Align = (Syncfusion.Blazor.Navigations.ItemAlign.Right), Text = "Back", TooltipText = "Back", Id = "Back" } };
    string[] pagerDropdown = new string[] { "All", "5", "10", "15", "20" };

    protected override async Task OnInitializedAsync()
    {
        SpinnerVisible = true;
        LaundryDetails = await LaundryServiceDetailsService.GetLaundryServiceDetails(int.Parse(Id));
        LaundryService = await LaundryServiceService.GetLaundryById(int.Parse(Id));
        SpinnerVisible = false;
    }
    protected void NavigateToDocument()
    {
        navigationManager.NavigateTo($"/docio/sales-invoice/{Id}");
    }

    protected async Task CloseTheService()
    {
        //Jest na sztywno wpisany czysty 1 ale, trzeba to zmienić dając wybór w okienie dialogowym gdzie co ma iść.
        warehause = (await WarehauseService.GetWarehausesByType(0)).First();
        foreach (var item in LaundryDetails)
        {
            cleanLaundry = new WarehauseDetail
            {
                HotelLinenId = item.HotelLinenId,
                WarehauseId = warehause.Id,
                Amount = item.Amount
            };
            if (warehause.WarehauseDetails.Any(x => x.HotelLinenId == cleanLaundry.HotelLinenId))
            {

                warehauseItemAmount = warehause.WarehauseDetails
                .Where(x => x.HotelLinenId == cleanLaundry.HotelLinenId)
                .Select(x => x.Amount).First();

                warehauseDetailID = warehause.WarehauseDetails
                .Where(x => x.HotelLinenId == cleanLaundry.HotelLinenId)
                .Select(x => x.Id).First();

                cleanLaundry.Id = warehauseDetailID;
                cleanLaundry.Amount = warehauseItemAmount + cleanLaundry.Amount;

                await WarehauseDetailsService.UpdateDetails(cleanLaundry);
            }
            else
            {
                await WarehauseDetailsService.CreateDetails(cleanLaundry);

            }
        }
        LaundryService.IsFinished = true;
        LaundryService.IssuedDate = DateTime.Now;
        await LaundryServiceService.UpdateLaundry(LaundryService);
        navigationManager.NavigateTo("/warehauses");

    }
    public async void ActionBeginHandler(ActionEventArgs<LaundryServiceDetail> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {

            if (args.Action == "Edit")
            {
                await LaundryServiceDetailsService.UpdateLaundryDetails(args.Data);
            }

        }
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            await LaundryServiceDetailsService.Delete(args.Data.Id);
        }
    }

    public void RowSelectHandler(RowSelectEventArgs<LaundryServiceDetail> args)
    {
        DetailId = args.Data.Id;
    }

    public void ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "Close")
        {
            // wysakuje okienka z zapytaniem czy chce fakture jak ce to tworze fakture z tymi danymi jak nie to
            // wyrzucam informacje ze posciel przeniesiona do hotelu faktura odłożona na później
            this.IsVisible = true;

        }
        if (args.Item.Id == "Back")
        {
            navigationManager.NavigateTo("/laundryservices");
        }

    }
    private async Task Cancel()
    {
        await CloseTheService();
        this.IsVisible = false;
    }
    private void HandleValidSubmit()
    {
        Console.WriteLine("OnValidSubmit");
    }
    private async Task CreateAnInvoice()
    {
        List<LaundryService> listOfServices = new List<LaundryService>();
        listOfServices.Add(LaundryService);
        Invoice newInvoice = new Invoice()
        {
            Name = "Faktura Vat",
            Number = null,
            DateOfInvoice = DateTime.Now,
            PaymentDate = DateTime.Now.AddDays(10),
            TotalCost = LaundryService.TotalBrutto,
            IsPaid = false,
            LaundryServices = listOfServices

        };


        Invoice = await InvoiceService.CreateInvoice(newInvoice);
        LaundryService.InvoiceId = Invoice.Id;
        ///    await LaundryServiceService.UpdateLaundry(LaundryService);
        await CloseTheService();

    }

}
<style>
    .dialog {
        min-height: 400px;
        height: 100%;
        position: relative;
    }

    input[type=text], select {
        width: 100%;
        padding: 12px 20px;
        margin: 8px 0;
        display: inline-block;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-sizing: border-box;
    }

    .specyfic.e-toolbar-item .e-tbar-btn {
        background-color: orange;
    }

    .e-toolbar-item .e-tbar-btn {
        border: solid;
    }
</style>
