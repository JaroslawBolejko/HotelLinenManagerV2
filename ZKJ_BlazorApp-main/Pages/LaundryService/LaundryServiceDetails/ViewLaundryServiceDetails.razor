@page "/viewLaudryServiceDetails/{Id}"
@attribute [Authorize]
@inject ILaundryServiceDetailsService LaundryServiceDetailsService
@inject IWarehauseDetailsService WarehauseDetailsService
@inject IWarehauseService WarehauseService
@inject ILaundryServiceService LaundryServiceService
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager


<div class="center">
    @if (loading)
    {
        <div class="spinner-border spinner-border-sm"></div>
    }
    <table class="table">
        <thead>
            <tr>
                <th scope="col">
                    Name
                </th>
                <th scope="col">
                    Color
                </th>
                <th scope="col">
                    Amount
                </th>
            </tr>
        </thead>
        <tbody>

            @if (laundryDetails != null)
            {
                @foreach (var detail in laundryDetails)
                {
                    <tr>
                        <th scope="row">@detail.HotelLinenName</th>
                        <td>@detail.Color</td>
                        <td>@detail.Amount</td>
                        <td>
                            @* <a class="btn btn-primary" href='/edithotellinen/@hotelLinen.Id'>Edit</a>  | Delete
                                <a class="btn btn-danger" @onclick="() => DeleteHotelLinen(hotelLinen.Id)">Delete</a>*@
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
    <div class="form-group">
        <a class="btn btn-primary" href='/laundryservices'>Back</a>
        @if (laundryService!=null && laundryService.IsFinished != true)
        {
            <a class="btn btn-primary" @onclick="()=>CloseTheService()">Close the service</a>
        }
    </div>
</div>

@code{

    [Parameter]
    public string Id { get; set; }
    private IEnumerable<LaundryServiceDetail> laundryDetails;
    private bool loading;
    private WarehauseDetail cleanLaundry;
    private Warehause warehause;
    private LaundryService laundryService;
    private int warehauseItemAmount;
    private int warehauseDetailID;


    protected override async Task OnInitializedAsync()
    {
        loading = true;
        laundryDetails = await LaundryServiceDetailsService.GetLaundryServiceDetails(int.Parse(Id));
        laundryService = await LaundryServiceService.GetLaundryById(int.Parse(Id));
        loading = false;
    }

    protected async Task CloseTheService()
    {
        warehause = (await WarehauseService.GetWarehausesByType(0)).First();
        foreach (var item in laundryDetails)
        {
            cleanLaundry = new WarehauseDetail
            {
                HotelLinenId = item.HotelLinenId,
                WarehauseId = warehause.Id,
                Amount = item.Amount
            };
            if (warehause.WarehauseDetails.Any(x => x.HotelLinenId == cleanLaundry.HotelLinenId))
            {

                warehauseItemAmount = warehause.WarehauseDetails
                .Where(x => x.HotelLinenId == cleanLaundry.HotelLinenId)
                .Select(x => x.Amount).First();

                warehauseDetailID = warehause.WarehauseDetails
                .Where(x => x.HotelLinenId == cleanLaundry.HotelLinenId)
                .Select(x => x.Id).First();

                cleanLaundry.Id = warehauseDetailID;
                cleanLaundry.Amount = (ushort)(warehauseItemAmount + cleanLaundry.Amount);

                await WarehauseDetailsService.UpdateDetails(cleanLaundry);
            }
            else
            {
                await WarehauseDetailsService.CreateDetails(cleanLaundry);

            }
        }
        laundryService.IsFinished = true;
        laundryService.IssuedDate = DateTime.Now;
        await LaundryServiceService.UpdateLaundry(laundryService);
        navigationManager.NavigateTo("/warehauses");

    }
}