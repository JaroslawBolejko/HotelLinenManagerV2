@page "/docio/sales-invoice/{Id}"
@inject ILaundryServiceDetailsService LaundryServiceDetailsService
@inject ILaundryServiceService LaundryServiceService
@inject ILocalStorageService LocalStorageService
@inject IUserService UserService
@inject Microsoft.JSInterop.IJSRuntime JS
@using System.Linq
@using System.IO
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.DocIO
@using Syncfusion.DocIO.DLS


<h2>Syncfusion DocIO library (Essential DocIO)</h2>
<p>Syncfusion Blazor DocIO library (Essential DocIO) used to create, read, edit, and convert DocIO files in your applications without Microsoft Office dependencies.</p>
<button class="btn btn-primary" @onclick="@CreateWord">Create Word</button>
<button class="btn btn-primary" @onclick="@CreateMerge">Create Merge</button>


@code{

    private List<LaundryServiceDetail> LaundryDetails { get; set; }
    private LaundryService LaundryService { get; set; }
    [Parameter]
    public string Id { get; set; }
    private User User { get; set; }
    private User UserValues { get; set; }

    //string[] fieldValues = new string[3];


    protected override async Task OnInitializedAsync()
    {
        // loading = true;
        LaundryDetails = (await LaundryServiceDetailsService.GetLaundryServiceDetails(int.Parse(Id))).ToList();
        LaundryService = await LaundryServiceService.GetLaundryById(int.Parse(Id));
        User = await LocalStorageService.GetItem<User>("userData");
        UserValues = await UserService.GetMe();
        //laundryService = await LaundryServiceService.GetLaundryById(int.Parse(Id));
        //loading = false;
    }
    public void CreateMerge()
    {
        //// Creates an instance of a WordDocument
        //WordDocument document = new WordDocument();
        //// Adds one section and one paragraph to the document
        //document.EnsureMinimal();
        //// Sets page margins to the last section of the document
        //document.LastSection.PageSetup.Margins.All = 72;
        //// Appends text to the last paragraph.
        //document.LastParagraph.AppendText("Id: ");
        //// Appends merge field to the last paragraph.
        //document.LastParagraph.AppendField("Id", FieldType.FieldMergeField);
        //document.LastParagraph.AppendText("\nFirstName: ");
        //document.LastParagraph.AppendField("FirstName", FieldType.FieldMergeField);
        //document.LastParagraph.AppendText("\nLastName: ");
        //document.LastParagraph.AppendField("LastName", FieldType.FieldMergeField);

        ////Saves and closes the WordDocument instance.
        //MemoryStream stream = new MemoryStream();
        //document.Save(stream, FormatType.Docx);
        ////Closes the Word document
        //document.Close();

        //JS.SaveAs("Merge.docx", stream.ToArray());

        /////////////////////////////////////////////

        string basePath = @"wwwroot/";
        string dataPath = basePath + @"data/docio/merge.docx";
        string newPath = @"C:\FileStream\merge.docx";

        FileStream fileStreamPath = new FileStream(newPath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
        WordDocument document = new WordDocument(fileStreamPath, FormatType.Doc);

        string[] fieldNames = new string[] { "Id", "FirstName", "LastName" };
        string[] fieldValues = new string[] { UserValues.Id.ToString(), UserValues.FirstName.ToString(), UserValues.LastName.ToString() };


        //Performs the mail merge
        document.MailMerge.Execute(fieldNames, fieldValues);
        //Saves and closes the WordDocument instance
        MemoryStream stream = new MemoryStream();
        document.Save(stream, FormatType.Docx);
        //Closes the Word document
        document.Close();
        stream.Position = 0;

        JS.SaveAs("Merge.docx", stream.ToArray());


    }

    public void CreateWord()
    {
        //Creating a new document
        WordDocument document = new WordDocument();
        //Adding a new section to the document
        WSection section = document.AddSection() as WSection;
        //Set Margin of the section
        section.PageSetup.Margins.All = 72;
        //Set page size of the section
        section.PageSetup.PageSize = new Syncfusion.Drawing.SizeF(612, 792);


        //Create Paragraph styles
        WParagraphStyle style = document.AddParagraphStyle("Normal") as WParagraphStyle;
        style.CharacterFormat.FontName = "Calibri";
        style.CharacterFormat.FontSize = 11f;
        style.ParagraphFormat.BeforeSpacing = 0;
        style.ParagraphFormat.AfterSpacing = 8;
        style.ParagraphFormat.LineSpacing = 13.8f;

        style = document.AddParagraphStyle("Heading 1") as WParagraphStyle;
        style.ApplyBaseStyle("Normal");

        style.CharacterFormat.FontName = "Calibri Light";
        style.CharacterFormat.FontSize = 16f;
        style.CharacterFormat.TextColor = Syncfusion.Drawing.Color.FromArgb(3, 160, 98);
        style.ParagraphFormat.BeforeSpacing = 12;
        style.ParagraphFormat.AfterSpacing = 0;
        style.ParagraphFormat.Keep = true;
        style.ParagraphFormat.KeepFollow = true;
        style.ParagraphFormat.OutlineLevel = OutlineLevel.Level1;
        IWParagraph paragraph = section.HeadersFooters.Header.AddParagraph();

        paragraph.ApplyStyle("Normal");
        paragraph.ParagraphFormat.HorizontalAlignment = HorizontalAlignment.Left;

        WTextRange textRange = paragraph.AppendText($"{User.Company.Name}\n" +
            $"{User.Company.Street} {User.Company.Number}\n" +
            $"{User.Company.ZipCode} {User.Company.City}\n" +
            $"Tel.: {User.Company.TelefonNumber}\n" +
            $"NIP: {User.Company.TaxNumber}") as WTextRange;
        paragraph.ParagraphFormat.LineSpacing = 8;
        textRange.CharacterFormat.FontSize = 12f;
        textRange.CharacterFormat.FontName = "Calibri";
        textRange.CharacterFormat.TextColor = Syncfusion.Drawing.Color.Black;
        textRange.CharacterFormat.NumberSpacing.Equals(1);
        //Adres po prawej
        paragraph = section.AddParagraph();
        paragraph.ApplyStyle("Normal");
        paragraph.ParagraphFormat.HorizontalAlignment = HorizontalAlignment.Left;
        textRange = paragraph.AppendText($"\t\t\t\t\t\t\t\t\t\t{LaundryService.Laundry.Name}\n" +
           $"\t\t\t\t\t\t\t\t\t\t{LaundryService.Laundry.Street} {LaundryService.Laundry.Number}\n" +
           $"\t\t\t\t\t\t\t\t\t\t{LaundryService.Laundry.ZipCode} {LaundryService.Laundry.City}\n" +
           $"\t\t\t\t\t\t\t\t\t\tTel.: {LaundryService.Laundry.TelefonNumber}\n" +
           $"\t\t\t\t\t\t\t\t\t\tNIP: {LaundryService.Laundry.TaxNumber}") as WTextRange;
        paragraph.ParagraphFormat.LineSpacing = 8;


        //Appends paragraph
        paragraph = section.AddParagraph();
        paragraph.ApplyStyle("Heading 1");
        paragraph.ParagraphFormat.HorizontalAlignment = HorizontalAlignment.Center;
        textRange = paragraph.AppendText($"Dokument Usługi prania nr {LaundryService.Number} ") as WTextRange;
        textRange.CharacterFormat.FontSize = 18f;
        textRange.CharacterFormat.FontName = "Calibri";

        int tableSize = LaundryDetails.Count;

        IWTable table = section.AddTable();
        table.TableFormat.HorizontalAlignment = RowAlignment.Center;
        //Creates the specified number of rows and columns
        table.ResetCells(tableSize + 1, 4);
        //Accesses the instance of the cell (first row, first cell)
        WTableCell firstCell = table.Rows[0].Cells[0];
        //Specifies the width of the cell
        firstCell.Width = 30;
        //Adds a paragraph into the cell; a cell must have atleast 1 paragraph
        paragraph = firstCell.AddParagraph();
        paragraph.ParagraphFormat.HorizontalAlignment = HorizontalAlignment.Center;
        IWTextRange textRange3 = paragraph.AppendText("L.P");
        textRange3.CharacterFormat.Bold = true;
        //Accesses the instance of cell (first row, second cell)
        WTableCell secondCell = table.Rows[0].Cells[1];
        secondCell.Width = 120;
        paragraph = secondCell.AddParagraph();
        paragraph.ParagraphFormat.HorizontalAlignment = HorizontalAlignment.Center;
        textRange3 = paragraph.AppendText("Type");
        textRange3.CharacterFormat.Bold = true;
        WTableCell thirdCell = table.Rows[0].Cells[2];
        thirdCell.Width = 120;
        paragraph = thirdCell.AddParagraph();
        paragraph.ParagraphFormat.HorizontalAlignment = HorizontalAlignment.Center;
        textRange3 = paragraph.AppendText("Description");
        textRange3.CharacterFormat.Bold = true;
        WTableCell fourthCell = table.Rows[0].Cells[3];
        fourthCell.Width = 120;
        paragraph = fourthCell.AddParagraph();
        paragraph.ParagraphFormat.HorizontalAlignment = HorizontalAlignment.Center;
        textRange3 = paragraph.AppendText("Amount");
        textRange3.CharacterFormat.Bold = true;


        for (int i = 1; i <= tableSize; i++)
        {

            firstCell = table.Rows[i].Cells[0];
            firstCell.Width = 30;
            firstCell.CellFormat.VerticalAlignment = VerticalAlignment.Middle;
            paragraph = firstCell.AddParagraph();
            paragraph.ParagraphFormat.HorizontalAlignment = HorizontalAlignment.Center;
            textRange3 = paragraph.AppendText($"{i}");
            secondCell = table.Rows[i].Cells[1];
            secondCell.Width = 120;
            secondCell.CellFormat.VerticalAlignment = VerticalAlignment.Middle;
            paragraph = secondCell.AddParagraph();
            paragraph.ParagraphFormat.HorizontalAlignment = HorizontalAlignment.Center;
            textRange3 = paragraph.AppendText($"{LaundryDetails[i - 1].HotelLinenType.ToString()}");
            thirdCell = table.Rows[i].Cells[2];
            thirdCell.Width = 120;
            thirdCell.CellFormat.VerticalAlignment = VerticalAlignment.Middle;
            paragraph = thirdCell.AddParagraph();
            paragraph.ParagraphFormat.HorizontalAlignment = HorizontalAlignment.Center;
            textRange3 = paragraph.AppendText($"{LaundryDetails[i - 1].HotelLinenName}");
            fourthCell = table.Rows[i].Cells[3];
            fourthCell.Width = 120;
            fourthCell.CellFormat.VerticalAlignment = VerticalAlignment.Middle;
            paragraph = fourthCell.AddParagraph();
            paragraph.ParagraphFormat.HorizontalAlignment = HorizontalAlignment.Center;
            textRange3 = paragraph.AppendText($"{LaundryDetails[i - 1].Amount}");

        }

        //Saves the Word document to MemoryStream
        MemoryStream stream = new MemoryStream();
        document.Save(stream, FormatType.Docx);
        //Closes the Word document
        document.Close();
        stream.Position = 0;

        //Download the Word document in the browser
        JS.SaveAs("Sample.docx", stream.ToArray());
    }


}

