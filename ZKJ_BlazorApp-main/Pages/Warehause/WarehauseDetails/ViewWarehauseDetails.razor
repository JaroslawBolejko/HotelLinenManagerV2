@page "/viewWarehauseDetails/{Id}"
@attribute [Authorize]
@inject IWarehauseDetailsService WarehauseDetailsService
@inject IWarehauseService WarehauseService
@inject ILaundryServiceService LaundryServiceService
@inject ILaundryServiceDetailsService LaundryServiceDetailsService
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager

@if (SpinnerVisible == true)
{
    <SfSpinner Visible="true" Type="@SpinnerType.Bootstrap4" Size="100" Label="Data loading"></SfSpinner>
}


<SfGrid @ref="warehauseDetailGrid" DataSource="@WarehauseDetails" AllowPaging="true" AllowSorting="true" AllowFiltering="true" Toolbar="Toolbaritems">
    <GridEvents OnToolbarClick="ToolbarClickHandler" RowSelected="RowSelectHandler" OnActionBegin="ActionBeginHandler" TValue="WarehauseDetail"></GridEvents>
    <GridPageSettings PageSize="10" PageCount="5" PageSizes="@pagerDropdown"></GridPageSettings>
    <GridFilterSettings Mode="Syncfusion.Blazor.Grids.FilterBarMode.Immediate" Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
    <GridEditSettings Mode="EditMode.Dialog" AllowAdding="true" AllowEditing="true" AllowDeleting="true"></GridEditSettings>
   @*Tu dorobić pod WarehauseDetail bo jest Warhause*@
    <GridColumns>
        <GridColumn AllowAdding="true" Visible="false" IsPrimaryKey="true" Field=@nameof(WarehauseDetail.Id) HeaderText="Id"></GridColumn>
        <GridColumn AllowAdding="true" Visible="false" Field="@nameof(Warehause.CompanyId)" HeaderText="CompanyId"></GridColumn>
        <GridColumn AllowAdding="true" Visible="false" Field=@nameof(Warehause.WarehauseType) HeaderText="WarehauseType"></GridColumn>
        <GridColumn Field=@nameof(Warehause.Name) HeaderText="Name"></GridColumn>
        <GridColumn Field=@nameof(Warehause.WarehauseNumber) HeaderText="Warehause number"></GridColumn>
    </GridColumns>
</SfGrid>



@code {
    [Parameter]
    public string Id { get; set; }
    private IEnumerable<WarehauseDetail> WarehauseDetails { get; set; }
    private Warehause Warehause { get; set; }
    private LaundryService LastLaundry { get; set; }
    private LaundryService laundry;
    private LaundryServiceDetail laundryServiceDetail;
    private LaundryService CreatedLaundryService { get; set; }
    private string numberToFilter;
    public bool SpinnerVisible { get; set; }
    public SfGrid<WarehauseDetail> warehauseDetailGrid { get; set; }
    string[] pagerDropdown = new string[] { "All", "5", "10", "15", "20" };
    private List<Object> Toolbaritems = new List<Object>() { "Add", "Edit", "Delete", "Update", "Cancel" };
    public int DetailId { get; set; }


    protected override async Task OnInitializedAsync()
    {
        SpinnerVisible = true;
        WarehauseDetails = await WarehauseDetailsService.GetWarehauseLinen(int.Parse(Id));
        Warehause = await WarehauseService.GetWarehauseById(int.Parse(Id));
        LastLaundry = (await LaundryServiceService.GetAllLaundry()).OrderBy(x => x.Number).Last();
        SpinnerVisible = false;
    }


    protected string DocumentNumerCreator(string str)
    {
        StringBuilder sb = new StringBuilder();
        string docNumber;
        int number = 0;
        if (str == null)
        {
            docNumber = "1";
        }
        else
        {
            var tab = str.Split("/", StringSplitOptions.RemoveEmptyEntries);
            number = int.Parse(tab[0]) + 1;
            docNumber = number.ToString();

        }
        string date = DateTime.Now.ToString("MM/yyyy").Replace(".", "/");

        return sb.Append(docNumber).Append('/').Append(date).ToString();

    }

    protected async Task MoveToLoundry()
    {
        laundry = new LaundryService
        {
            Name = "Usługa Prania",
            Number = DocumentNumerCreator(LastLaundry.Number),
            CompanyId = LastLaundry.CompanyId,
            IsFinished = false,
            RecievedDate = DateTime.Now,
            IssuedDate = null

        };
        numberToFilter = laundry.Number;

        await LaundryServiceService.CreateLaundry(laundry);
        CreatedLaundryService = (await LaundryServiceService.GetServiceByNumber(numberToFilter)).First();


        foreach (var detail in WarehauseDetails)
        {
            laundryServiceDetail = new LaundryServiceDetail
            {
                LaundryServiceId = CreatedLaundryService.Id,
                HotelLinenId = detail.HotelLinenId,
                Amount = detail.Amount

            };

            await LaundryServiceDetailsService.CreateLaundryDetails(laundryServiceDetail);
        }
        foreach (var detail in WarehauseDetails)
        {
            await WarehauseDetailsService.Delete(detail.Id);
        }

        navigationManager.NavigateTo($"/laundryservices");

    }

    public void RowSelectHandler(RowSelectEventArgs<WarehauseDetail> args)
    {
        DetailId = args.Data.Id;
    }
    public void ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {

        if (args.Item.Id == "View")
        {
            if (DetailId == 0)
            {
                navigationManager.NavigateTo($"/viewWarehauseDetails");
            }
            else
            {
                navigationManager.NavigateTo($"/viewWarehauseDetails/{DetailId}");

            }
        }
    }
    public async void ActionBeginHandler(ActionEventArgs<WarehauseDetail> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            if (args.Action == "Add")
            {
                await WarehauseDetailsService.CreateDetails(args.Data);
                WarehauseDetails = (await WarehauseDetailsService.GetAllDetails()).ToList();
                warehauseDetailGrid.Refresh();
            }
            if (args.Action == "Edit")
            {
                await WarehauseDetailsService.UpdateDetails(args.Data);
            }

        }
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            await WarehauseDetailsService.Delete(args.Data.Id);
        }
    }
}
