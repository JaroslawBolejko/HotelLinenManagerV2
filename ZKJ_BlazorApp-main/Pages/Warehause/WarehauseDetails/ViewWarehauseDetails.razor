@page "/viewWarehauseDetails/{Id}"
@attribute [Authorize]
@inject IWarehauseDetailsService WarehauseDetailsService
@inject IWarehauseService WarehauseService
@inject ILaundryServiceService LaundryServiceService
@inject ILaundryServiceDetailsService LaundryServiceDetailsService
@inject IHotelLinenService HotelLinenService
@inject ILocalStorageService LocalStorageService
@inject IRelatedCompaniesService RelatedCompanyService
@inject IPriceListService PriceListService
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager




@if (SpinnerVisible == true)
{
    <SfSpinner Visible="true" Type="@SpinnerType.Bootstrap4" Size="100" Label="Data loading"></SfSpinner>
}
@if (Warehause != null)
{
    <center><h5>@Warehause.Name nr @Warehause.WarehauseNumber</h5></center>
}

<SfGrid @ref="warehauseDetailGrid" DataSource="@WarehauseDetails" AllowPaging="true" AllowSorting="true" AllowFiltering="true" Toolbar="Toolbaritems">
    <GridEvents OnToolbarClick="ToolbarClickHandler" RowSelected="RowSelectHandler" OnActionBegin="ActionBeginHandler" CommandClicked="OnCommandClicked" TValue="WarehauseDetail"></GridEvents>
    <GridPageSettings PageSize="10" PageCount="5" PageSizes="@pagerDropdown"></GridPageSettings>
    <GridFilterSettings Mode="Syncfusion.Blazor.Grids.FilterBarMode.Immediate" Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
    <GridEditSettings Mode="EditMode.Dialog" AllowEditOnDblClick="true" AllowAdding="true" AllowEditing="true" AllowDeleting="true"></GridEditSettings>
    <GridColumns>
        <GridColumn AllowAdding="false" AllowEditing="false" Width="0" IsPrimaryKey="true" Field=@nameof(WarehauseDetail.Id) HeaderText="Id"></GridColumn>
        <GridColumn Field="@nameof(WarehauseDetail.HotelLinenType)" HeaderText="Description">
            <EditTemplate>
                <span>Type</span>
                <SfDropDownList TItem="string" TValue="Models.Type"
                                @bind-Value="@((context as WarehauseDetail).HotelLinenType)"
                                DataSource="@AvailableLinens">
                </SfDropDownList>
            </EditTemplate>
        </GridColumn>
        <GridColumn Field="@nameof(WarehauseDetail.HotelLinenName)" HeaderText="Description"></GridColumn>
        <GridColumn Field=@nameof(WarehauseDetail.Amount) HeaderText="Amount"></GridColumn>
        <GridColumn Field=@nameof(WarehauseDetail.Color) HeaderText="Color"></GridColumn>
        <GridColumn HeaderText="Actions" Width="110">
            <GridCommandColumns>
                <GridCommandColumn ButtonOption="@(new CommandButtonOptions()
                                                   { Content = "Move To", CssClass = "e-flat" })"></GridCommandColumn>
            </GridCommandColumns>
        </GridColumn>
    </GridColumns>
</SfGrid>

<div class="dialog">
    <SfDialog @bind-Visible="@IsVisible" ShowCloseIcon="true" Width="300px" IsModal="true">
        <DialogTemplates>
            <Header>Add Company</Header>
            <Content>
                <EditForm Model="@laundryToMove" OnValidSubmit="HandleValidSubmit">
                    <div class="dialogForm">
                        <form>
                            <label for="LaundryId" class="control-label">Laundry</label>
                            <CustomInputSelect id="LaundryId" @bind-Value="@laundryToMove.LaundryId" class="form-control">
                                @if (relatedCompanies != null)
                                {
                                    @foreach (var company in relatedCompanies)
                                    {
                                        <option value="@company.LaundryId">@company.Laundry.Name</option>
                                    }
                                }
                            </CustomInputSelect>
                        </form>
                    </div>
                </EditForm>
            </Content>
        </DialogTemplates>
        <DialogButtons>
            <DialogButton CssClass="dialogButton" Content="Submit" IsPrimary="true" OnClick="@MoveToLoundry" />
            <DialogButton CssClass="dialogButton" Content="Cancel" OnClick="@Cancel" />
        </DialogButtons>
    </SfDialog>
</div>

@code {
    [Parameter]
    public string Id { get; set; }
    public string WarehauseId { get; set; }
    private IEnumerable<WarehauseDetail> WarehauseDetails { get; set; }
    private Warehause Warehause { get; set; }
    private LaundryService laundry;
    private LaundryServiceDetail laundryServiceDetail;
    public bool SpinnerVisible { get; set; }
    public SfGrid<WarehauseDetail> warehauseDetailGrid { get; set; }
    string[] pagerDropdown = new string[] { "All", "5", "10", "15", "20" };
    public int DetailId { get; set; }
    public string[] AvailableLinens { get; set; }
    private List<Object> Toolbaritems = new List<Object>() {"Edit", "Delete", "Update", "Cancel"
    , new ItemModel() {CssClass="specyfic", Align = (Syncfusion.Blazor.Navigations.ItemAlign.Right), Text = "Back", TooltipText = "Back", Id = "Back" } };
    private bool IsVisible { get; set; }
    private RelatedCompany laundryToMove = new RelatedCompany();
    private IEnumerable<RelatedCompany> relatedCompanies;
    private List<PriceList> Prices { get; set; }
    private int PriceListId { get; set; }
    private List<PriceListDetail> PriceDetails { get; set; }
    private Move total = new Move();


    protected override async Task OnInitializedAsync()
    {
        SpinnerVisible = true;
        WarehauseDetails = await WarehauseDetailsService.GetWarehauseLinen(int.Parse(Id));
        Warehause = await WarehauseService.GetWarehauseById(int.Parse(Id));
        WarehauseId = Id;
        await LocalStorageService.SetItem("warehauseId", WarehauseId);
        AvailableLinens = (await HotelLinenService.GetAll()).Select(x => x.TypeName.ToString()).ToArray();
        relatedCompanies = await RelatedCompanyService.GetAllRelatedCompanies(Warehause.CompanyId);
        laundryToMove.LaundryId = relatedCompanies.Select(x => x.LaundryId).FirstOrDefault();

        if (Warehause != null && Warehause.WarehauseType.ToString() == "Dirty_Linen_Warehause")
        {
            Toolbaritems.Remove("Add");
            Toolbaritems.Add(new ItemModel()
            {
                CssClass = "specyfic",
                Align = (Syncfusion.Blazor.Navigations.ItemAlign.Right),
                Text = "Move All Linnen To Laundry",
                TooltipText = "Move To Laundry",
                Id = "MoveToLaundry"
            });
        }

        SpinnerVisible = false;
    }


    public void OnCommandClicked(CommandClickEventArgs<WarehauseDetail> args)
    {

        if (args.CommandColumn.ButtonOption.Content == "Move To")
        {
            navigationManager.NavigateTo($"/partialmove/{args.RowData.Id}");
        }

    }

    public void RowSelectHandler(RowSelectEventArgs<WarehauseDetail> args)
    {
        DetailId = args.Data.Id;
    }

    public void ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {

        if (args.Item.Id == "Back")
        {
            navigationManager.NavigateTo($"/warehauses");
        }
        if (args.Item.Id == "MoveToLaundry")
        {
            IsVisible = true;
            // await MoveToLoundry();
        }

    }
    protected async Task MoveToLoundry()
    {
        //najpierw tworze servis po to aby szczgół mógł być do niego przypisany

        laundry = new LaundryService
        {
            Name = "Usługa Prania",
            Number = null,
            CompanyId = Warehause.CompanyId,
            IsFinished = false,
            RecievedDate = DateTime.Now,
            IssuedDate = null,
            LaundryId = laundryToMove.LaundryId

        };

        int laundryServiceId = await LaundryServiceService.CreateLaundry(laundry);
        Prices = (await PriceListService.GetAllPriceLists(laundry.CompanyId, laundry.LaundryId)).ToList();
        PriceDetails = Prices.Where(x => x.IsCurrent == true).Select(y => y.Details).FirstOrDefault();


        foreach (var detail in WarehauseDetails)
        {
            decimal price = PriceDetails.Where(x => x.LinenType == detail.HotelLinen.TypeName).Select(y => y.PricePerKg).FirstOrDefault();
            int tax = PriceDetails.Where(x => x.LinenType == detail.HotelLinen.TypeName).Select(y => y.TaxValue).FirstOrDefault();

            laundryServiceDetail = new LaundryServiceDetail
            {
                LaundryServiceId = laundryServiceId,
                HotelLinenId = detail.HotelLinenId,
                Amount = detail.Amount,
                PricePerKg = price,
                TotalWeight = detail.Amount * detail.HotelLinen.Weight,
                TaxValue = tax

            };
           
            //obliczam tolatl values i aktualizuje usługęPrania
            await LaundryServiceDetailsService.CreateLaundryDetails(laundryServiceDetail);
            decimal taxInDec = (decimal)laundryServiceDetail.TaxValue / 100;
            decimal taxFactor = (1 + taxInDec);
            total.SingleBruttoValue = ((decimal)laundryServiceDetail.TotalWeight * taxFactor * laundryServiceDetail.PricePerKg);
            laundry.TotalServiceWeight += laundryServiceDetail.TotalWeight;
            laundry.TotalNetto += (laundryServiceDetail.PricePerKg * (decimal)laundryServiceDetail.TotalWeight);
            laundry.TotalBrutto += total.SingleBruttoValue;

        }
     
        laundry.TotalTax = laundry.TotalBrutto - laundry.TotalNetto;
        laundry.Id = laundryServiceId;

        await LaundryServiceService.UpdateLaundry(laundry);


        foreach (var detail in WarehauseDetails)
        {
            await WarehauseDetailsService.Delete(detail.Id);
        }

        navigationManager.NavigateTo($"/laundryservices");

    }
    public async void ActionBeginHandler(ActionEventArgs<WarehauseDetail> args)
    {

        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {

            //if (args.Action == "Add")
            //{
            //    args.Data.WarehauseId = int.Parse(Id);
            //    await WarehauseDetailsService.CreateDetails(args.Data);
            //    WarehauseDetails = (await WarehauseDetailsService.GetAllDetails()).ToList();
            //    warehauseDetailGrid.Refresh();
            //}

            if (args.Action == "Edit")
            {
                await WarehauseDetailsService.UpdateDetails(args.Data);
            }


        }
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            await WarehauseDetailsService.Delete(args.Data.Id);
        }
    }
    private void Cancel()
    {
        this.IsVisible = false;
    }
    private void HandleValidSubmit()
    {
        Console.WriteLine("OnValidSubmit");
    }
}
<style>
    .dialog {
        min-height: 400px;
        height: 100%;
        position: relative;
    }

    input[type=text], select {
        width: 100%;
        padding: 12px 20px;
        margin: 8px 0;
        display: inline-block;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-sizing: border-box;
    }

    .specyfic.e-toolbar-item .e-tbar-btn {
        background-color: orange;
    }

    .e-toolbar-item .e-tbar-btn {
        border: solid;
    }
</style>
