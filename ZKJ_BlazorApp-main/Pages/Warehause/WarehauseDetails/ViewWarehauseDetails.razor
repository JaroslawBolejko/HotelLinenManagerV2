@page "/viewWarehauseDetails/{Id}"
@attribute [Authorize]
@inject IWarehauseDetailsService WarehauseDetailsService
@inject IWarehauseService WarehauseService
@inject ILaundryServiceService LaundryServiceService
@inject ILaundryServiceDetailsService LaundryServiceDetailsService
@inject IHotelLinenService HotelLinenService
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager

@if (SpinnerVisible == true)
{
    <SfSpinner Visible="true" Type="@SpinnerType.Bootstrap4" Size="100" Label="Data loading"></SfSpinner>
}
@if (Warehause != null)
{
    <center><h5>@Warehause.Name nr @Warehause.WarehauseNumber</h5></center>
}

<SfGrid @ref="warehauseDetailGrid" DataSource="@WarehauseDetails" AllowPaging="true" AllowSorting="true" AllowFiltering="true" Toolbar="Toolbaritems">
    <GridEvents OnToolbarClick="ToolbarClickHandler" RowSelected="RowSelectHandler" OnActionBegin="ActionBeginHandler" CommandClicked="OnCommandClicked" TValue="WarehauseDetail"></GridEvents>
    <GridPageSettings PageSize="10" PageCount="5" PageSizes="@pagerDropdown"></GridPageSettings>
    <GridFilterSettings Mode="Syncfusion.Blazor.Grids.FilterBarMode.Immediate" Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
    <GridEditSettings Mode="EditMode.Dialog" AllowAdding="true" AllowEditing="true" AllowDeleting="true"></GridEditSettings>
    <GridColumns>
        <GridColumn AllowAdding="false" AllowEditing="false" Width="0" IsPrimaryKey="true" Field=@nameof(WarehauseDetail.Id) HeaderText="Id"></GridColumn>
        <GridColumn Field="@nameof(WarehauseDetail.HotelLinenType)" HeaderText="Description">
            <EditTemplate>
                <span>Type</span>
                <SfDropDownList TItem="string" TValue="Models.Type"
                                @bind-Value="@((context as WarehauseDetail).HotelLinenType)"
                                DataSource="@AvailableLinens">
                </SfDropDownList>
            </EditTemplate>
        </GridColumn>
        <GridColumn Field="@nameof(WarehauseDetail.HotelLinenName)" HeaderText="Description"></GridColumn>
        <GridColumn Field=@nameof(WarehauseDetail.Amount) HeaderText="Amount"></GridColumn>
        <GridColumn Field=@nameof(WarehauseDetail.Color) HeaderText="Color"></GridColumn>
        <GridColumn HeaderText="Actions" Width="110">
            <GridCommandColumns>
                <GridCommandColumn ButtonOption="@(new CommandButtonOptions()
                                                   { Content = "Move To", CssClass = "e-flat" })"></GridCommandColumn>
            </GridCommandColumns>
        </GridColumn>
    </GridColumns>
</SfGrid>



@code {
    [Parameter]
    public string Id { get; set; }
    private IEnumerable<WarehauseDetail> WarehauseDetails { get; set; }
    private Warehause Warehause { get; set; }
    private string LastLaundry { get; set; }
    private LaundryService laundry;
    private LaundryServiceDetail laundryServiceDetail;
    private LaundryService CreatedLaundryService { get; set; }
    private string numberToFilter;
    public bool SpinnerVisible { get; set; }
    public SfGrid<WarehauseDetail> warehauseDetailGrid { get; set; }
    string[] pagerDropdown = new string[] { "All", "5", "10", "15", "20" };
    public int DetailId { get; set; }
    // public string[] LinenTypesEnumValues = Enum.GetNames(typeof(Models.Type));
    // public List<HotelLinen> AvailableLinens { get; set; }
    public string[] AvailableLinens { get; set; }
    private List<Object> Toolbaritems = new List<Object>() {"Edit", "Delete", "Update", "Cancel"
    , new ItemModel() {CssClass="back", Align = (Syncfusion.Blazor.Navigations.ItemAlign.Right), Text = "Back", TooltipText = "Back", Id = "Back" } };

    protected override async Task OnInitializedAsync()
    {
        SpinnerVisible = true;
        WarehauseDetails = await WarehauseDetailsService.GetWarehauseLinen(int.Parse(Id));
        Warehause = await WarehauseService.GetWarehauseById(int.Parse(Id));
        AvailableLinens = (await HotelLinenService.GetAll()).Select(x => x.TypeName.ToString()).ToArray();

        if (Warehause != null && Warehause.WarehauseType.ToString() == "Magazyn_Brudnej_Bielizny")
        {
            Toolbaritems.Remove("Add");
            Toolbaritems.Add(new ItemModel()
            {
                CssClass = "specyfic",
                Align = (Syncfusion.Blazor.Navigations.ItemAlign.Right),
                Text = "Move All Linnen To Laundry",
                TooltipText = "Move To Laundry",
                Id = "MoveToLaundry"
            });
        }

        LastLaundry = (await LaundryServiceService.GetAllLaundry()).Select(x => x.Number).Last();
        SpinnerVisible = false;
    }

    protected string DocumentNumerCreator(string str)
    {
        var number = 1;
        var currentYear = DateTime.Now.Year;
        var currentMonth = DateTime.Now.Month;

        if (str == null)
        {
            return $"{number}/{currentMonth}/{currentYear}";
        }
        else
        {
            var tabOfNumbersFromDocument = str.Split("/", StringSplitOptions.RemoveEmptyEntries);
            var docNumber = int.Parse(tabOfNumbersFromDocument[0]);
            var month = int.Parse(tabOfNumbersFromDocument[1]);
            var year = int.Parse(tabOfNumbersFromDocument[2]);

            if (currentMonth > month)
            {
                return $"{number}/{currentMonth}/{currentYear}";
            }
            else if (currentYear > year)
            {
                return $"{number}/{currentMonth}/{currentYear}";
            }
            else
            {
                return $"{++docNumber}/{currentMonth}/{currentYear}";
            }

        }

    }

    public void OnCommandClicked(CommandClickEventArgs<WarehauseDetail> args)
    {

        if (args.CommandColumn.ButtonOption.Content == "Move To")
        {
            navigationManager.NavigateTo($"/partialmove/{args.RowData.Id}");
        }

    }

    public void RowSelectHandler(RowSelectEventArgs<WarehauseDetail> args)
    {
        DetailId = args.Data.Id;
    }
    public async void ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {

        if (args.Item.Id == "Back")
        {
            navigationManager.NavigateTo($"/warehauses");
        }
        if (args.Item.Id == "MoveToLaundry")
        {
            await MoveToLoundry();
        }

    }
    protected async Task MoveToLoundry()
    {
        laundry = new LaundryService
        {
            Name = "Usługa Prania",
            Number = DocumentNumerCreator(LastLaundry),
            CompanyId = Warehause.CompanyId,
            IsFinished = false,
            RecievedDate = DateTime.Now,
            IssuedDate = null

        };
        numberToFilter = laundry.Number;

        await LaundryServiceService.CreateLaundry(laundry);
        CreatedLaundryService = (await LaundryServiceService.GetServiceByNumber(numberToFilter)).First();


        foreach (var detail in WarehauseDetails)
        {
            laundryServiceDetail = new LaundryServiceDetail
            {
                LaundryServiceId = CreatedLaundryService.Id,
                HotelLinenId = detail.HotelLinenId,
                Amount = detail.Amount

            };

            await LaundryServiceDetailsService.CreateLaundryDetails(laundryServiceDetail);
        }
        foreach (var detail in WarehauseDetails)
        {
            await WarehauseDetailsService.Delete(detail.Id);
        }

        navigationManager.NavigateTo($"/laundryservices");

    }
    public async void ActionBeginHandler(ActionEventArgs<WarehauseDetail> args)
    {

        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {

            //if (args.Action == "Add")
            //{
            //    args.Data.WarehauseId = int.Parse(Id);
            //    await WarehauseDetailsService.CreateDetails(args.Data);
            //    WarehauseDetails = (await WarehauseDetailsService.GetAllDetails()).ToList();
            //    warehauseDetailGrid.Refresh();
            //}

            if (args.Action == "Edit")
            {
                await WarehauseDetailsService.UpdateDetails(args.Data);
            }


        }
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            await WarehauseDetailsService.Delete(args.Data.Id);
        }
    }
}
<style>
    .specyfic.e-toolbar-item .e-tbar-btn {
        background-color: orange;
    }

    .e-toolbar-item .e-tbar-btn {
        border: solid;
    }
</style>
