@page "/partialmove2/{Id}"
@inject IWarehauseDetailsService WarehauseDetailsService
@inject IWarehauseService WarehauseService
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
@using System.ComponentModel.DataAnnotations
@using Syncfusion.Blazor.Popups 


<div class="container">
    <div class="row">
        <div class="col-md-4">
            <EditForm Model="@newDet" OnValidSubmit="Move">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-group">

                    <label for="Amount" class="control-label">Amount</label>
                    <InputNumber id="Amount" class='form-control' @bind-Value="newDet.AmountToMove" /><br>
                    <ValidationMessage For="@(() => newDet.AmountToMove)" />

                    <label for="WarehauseType" class="control-label">Warehause</label>
                    <CustomInputSelect id="WarehauseType" @bind-Value="@newDet.WarehauseToMove" class="form-control">
                        @if (warehauses != null)
                        {
                            @foreach (var warehause in warehauses)
                            {
                                <option value="@warehause.Id">@warehause.Name nr.@warehause.WarehauseNumber</option>
                            }
                        }
                    </CustomInputSelect>
                </div>
                <button type="submit">Move</button>
            </EditForm>
            <SfDialog Width="250px" ShowCloseIcon="true" IsModal="true" @bind-Visible="@IsVisible">
                <DialogTemplates>
                    <Header> Dialog </Header>
                    <Content> This is a Dialog with button and primary button </Content>
                </DialogTemplates>
                <DialogButtons>
                    <DialogButton Content="OK" IsPrimary="true" OnClick="@CloseDialog" />
                    <DialogButton Content="Cancel" OnClick="@CloseDialog" />
                </DialogButtons>
            </SfDialog>
        </div>
    </div>
</div>
@code{
    [Parameter]
    public string Id { get; set; }
    private WarehauseDetail warehauseDetails = new WarehauseDetail();
    private WarehauseDetail warehauseToMove;
    private WarehauseDetail newDetail = new WarehauseDetail();
    private Move newDet = new Move();
    private IEnumerable<Warehause> warehauses;
    private bool IsVisible=false;

    protected override async Task OnInitializedAsync()
    {
        warehauseDetails = await WarehauseDetailsService.GetWarehauseDetailById(int.Parse(Id));
        warehauses = await WarehauseService.GetAll();
        newDet.AmountToMove = warehauseDetails.Amount;
        newDet.WarehauseDetailId = warehauseDetails.Id;

    }

    void cancel()
    {
        navigationManager.NavigateTo("/warehauses");
    }
    void CloseDialog()
    {
        IsVisible = false;
    }
    private async Task Move()
    {
        //warehauseToMove is a wearehause to update new amount of linen, newDet.WarehauseToMove is a WarehauseId to move to chosen linen.
        warehauseToMove = (await WarehauseDetailsService.GetDetailsWithQuery(newDet.WarehauseToMove, warehauseDetails.HotelLinenId)).FirstOrDefault();
        if (warehauseToMove != null)
        {
            warehauseToMove.Amount = (warehauseToMove.Amount + newDet.AmountToMove);
            await WarehauseDetailsService.UpdateDetails(warehauseToMove);
            warehauseDetails.Amount = (warehauseDetails.Amount - newDet.AmountToMove);
            if (warehauseDetails.Amount == 0)
            {
                await WarehauseDetailsService.Delete(warehauseDetails.Id);

            }
            else if (warehauseDetails.Amount < 0)
            {
                IsVisible = true;
            }
            else
            {
                await WarehauseDetailsService.UpdateDetails(warehauseDetails);
            }
            navigationManager.NavigateTo($"/viewWarehauseDetails/{warehauseDetails.WarehauseId}");

        }
        else
        {
            newDetail.HotelLinenId = warehauseDetails.HotelLinenId;
            newDetail.Amount = newDet.AmountToMove;
            newDetail.WarehauseId = newDet.WarehauseToMove;

            await WarehauseDetailsService.CreateDetails(newDetail);

            warehauseDetails.Amount = (warehauseDetails.Amount - newDet.AmountToMove);
            if (warehauseDetails.Amount == 0)
            {
                await WarehauseDetailsService.Delete(warehauseDetails.Id);

            }
            else if(warehauseDetails.Amount<0)
            {
                IsVisible = true;
                //navigationManager.NavigateTo("/valueBelowZero");
            }
            else
            {
                var result = await WarehauseDetailsService.UpdateDetails(warehauseDetails);

            }

            navigationManager.NavigateTo($"/viewWarehauseDetails/{warehauseDetails.WarehauseId}");
        }

    }

}

