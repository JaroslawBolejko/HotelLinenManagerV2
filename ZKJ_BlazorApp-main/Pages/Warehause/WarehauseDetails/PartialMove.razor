@page "/partialmove/{Id}"
@inject IWarehauseDetailsService WarehauseDetailsService
@inject IWarehauseService WarehauseService
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
@using Syncfusion.Blazor.Popups


<h1>Select warehause and amount.</h1>

<div class="container">
    <div class="row">
        <div class="col-md-4">
            <EditForm Model="warehauseDetails">

                <div class="form-group">

                    <input type="hidden" @bind-value="@warehauseDetails.Id" />

                    <label for="Amount" class="control-label">Amount</label>
                    <input for="Amount" class="form-control" @bind-value="@newDet.AmountToMove" />

                    <label for="WarehauseId" class="control-label">Warehause</label>
                    <CustomInputSelect id="WarehauseType" @bind-Value="@newDet.WarehauseToMove" class="form-control">
                        @if (warehauses != null)
                        {
                            @foreach (var warehause in warehauses)
                            {
                                <option value="@warehause.Id">@warehause.Name nr.@warehause.WarehauseNumber</option>
                            }
                        }
                    </CustomInputSelect>

                </div>
                <div class="form-group">
                    <button type="button" class="btn btn-success" @onclick="() => Validator()">Save</button>
                    <button type="button" class="btn btn-secondary" @onclick="() => Cancel()">Cancel</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>
<div id="target">
    <SfDialog Width="250px" ShowCloseIcon="true" IsModal="true" @bind-Visible="@IsVisible2"
              AllowDragging="true" EnableResize="true" ResizeHandles="@dialogResizeDirections">
        <DialogTemplates>
            <Header> Uwaga ! </Header>
            <Content>Wybierz inny magazyn lub pomieszczenie!</Content>
        </DialogTemplates>
        <DialogButtons>
            <DialogButton Content="OK" IsPrimary="true" OnClick="@CloseDialog" />
        </DialogButtons>
    </SfDialog>
</div>
<div class="error">
    <SfDialog Width="250px" ShowCloseIcon="true" IsModal="true" @bind-Visible="@IsVisible1"
              AllowDragging="true" EnableResize="true" ResizeHandles="@dialogResizeDirections">
        <DialogTemplates>
            <Header> Uwaga ! </Header>
            <Content> Ilość, którą chcesz przenieść jest większa od ilośći w magazynie.</Content>
        </DialogTemplates>
        <DialogButtons>
            <DialogButton Content="OK" IsPrimary="true" OnClick="@CloseDialog" />
        </DialogButtons>
    </SfDialog>
</div>
<style>
    #target .error {
        min-height: 400px;
        height: 100%;
        position: relative;
    }
</style>
@code{
    [Parameter]
    public string Id { get; set; }
    private WarehauseDetail warehauseDetails = new WarehauseDetail();
    private WarehauseDetail warehauseToMove;
    private WarehauseDetail newDetail = new WarehauseDetail();
    private Move newDet = new Move();
    private IEnumerable<Warehause> warehauses;
    private bool IsVisible1 { get; set; } = false;
    private bool IsVisible2 { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        warehauseDetails = await WarehauseDetailsService.GetWarehauseDetailById(int.Parse(Id));
        warehauses = await WarehauseService.GetAll();
        newDet.AmountToMove = warehauseDetails.Amount;
        newDet.WarehauseToMove = warehauseDetails.WarehauseId;
    }

    public async Task Validator()
    {
        if (warehauseDetails.Amount < newDet.AmountToMove)
        {
            IsVisible1 = true;
        }
        else if (warehauseDetails.WarehauseId == newDet.WarehauseToMove)
        {
            IsVisible2 = true;
        }
        else
        {
            await Move();
        }
    }

    private ResizeDirection[] dialogResizeDirections { get; set; } = new ResizeDirection[] { ResizeDirection.All };

    public void Cancel()
    {
        navigationManager.NavigateTo("/warehauses");
    }

    public void CloseDialog()
    {
        if (IsVisible1 == true)
        {
            IsVisible1 = false;
        }
        else if (IsVisible2 == true)
        {
            IsVisible2 = false;
        }
    }
    
    protected async Task Move()
    {
        //warehauseToMove is a wearehause to update new amount of linen, newDet.WarehauseToMove is a WarehauseId to move to chosen linen.
        warehauseToMove = (await WarehauseDetailsService.GetDetailsWithQuery(newDet.WarehauseToMove, warehauseDetails.HotelLinenId)).FirstOrDefault();

        if (warehauseToMove != null)
        {
            warehauseToMove.Amount = warehauseToMove.Amount + newDet.AmountToMove;
            await WarehauseDetailsService.UpdateDetails(warehauseToMove);
            warehauseDetails.Amount = warehauseDetails.Amount - newDet.AmountToMove;
            if (warehauseDetails.Amount == 0)
            {
                await WarehauseDetailsService.Delete(warehauseDetails.Id);

            }

            else
            {
                await WarehauseDetailsService.UpdateDetails(warehauseDetails);
            }
            navigationManager.NavigateTo($"/viewWarehauseDetails/{warehauseDetails.WarehauseId}");

        }
        else
        {
            newDetail.HotelLinenId = warehauseDetails.HotelLinenId;
            newDetail.Amount = newDet.AmountToMove;
            newDetail.WarehauseId = newDet.WarehauseToMove;

            await WarehauseDetailsService.CreateDetails(newDetail);

            warehauseDetails.Amount = warehauseDetails.Amount - newDet.AmountToMove;
            if (warehauseDetails.Amount == 0)
            {
                await WarehauseDetailsService.Delete(warehauseDetails.Id);

            }
            else
            {
                await WarehauseDetailsService.UpdateDetails(warehauseDetails);
            }

            navigationManager.NavigateTo($"/viewWarehauseDetails/{warehauseDetails.WarehauseId}");
        }

    }

}

