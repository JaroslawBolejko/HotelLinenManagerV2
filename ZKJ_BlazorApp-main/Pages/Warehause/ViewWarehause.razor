@page "/warehauses/{Id}"
@attribute [Authorize]
@inject IWarehauseService WarehauseService
@inject IHotelLinenService HotelLinenService

<div class="center"><h4>@warehause.Name</h4></div>

<div class="center">
    <table class="table">
        <thead>
            <tr>
                <th scope="col">
                    Name
                </th>
                <th scope="col">
                    Color
                </th>
                <th scope="col">
                    Amount
                </th>
            </tr>
        </thead>
        <tbody>
            @if (loading)
            {
                <div class="spinner-border spinner-border-sm"></div>
            }
            @if (hotelLinens != null)
            {

                @foreach (var hotelLinen in hotelLinens)
                {
                    if (hotelLinen.WarehauseId == int.Parse(Id))
                    {
                        <tr>
                            <th scope="row">@hotelLinen.NameWithShortDescription</th>
                            <td>@hotelLinen.Color</td>
                            <td>@hotelLinen.Amount</td>
                            <td>
                                <a class="btn btn-primary" href='/hotellinens/@hotelLinen.Id'>Edit</a>  | Delete
                                @*<a class="btn btn-danger" @onclick="() => DeleteHotelLinen(hotelLinen.Id)">Delete</a>*@
                            </td>
                        </tr>
                    }
                }

            }
        </tbody>
    </table>
</div>

@code {
    [Parameter]
    public string Id { get; set; }
    Warehause warehause = new Warehause();
    private bool loading;
    private IEnumerable<Models.HotelLinen> hotelLinens;

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        warehause = await WarehauseService.GetWarehauseById(int.Parse(Id));
        hotelLinens = await HotelLinenService.GetAll();
        loading = false;
    }


}
