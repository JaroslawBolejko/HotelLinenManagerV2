@page "/partialmove/{Id}"
@inject IWarehauseDetailsService WarehauseDetailsService
@inject IWarehauseService WarehauseService
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager

<h1>Select warehause and amount.</h1>

<div class="container">
    <div class="row">
        <div class="col-md-4">
            <EditForm Model="warehauseDetails">
                <div class="form-group">
                    
                    <input type="hidden" @bind-value="@warehauseDetails.Id" />
                    <label for="Amount" class="control-label">Amount</label>
                    <input for="Amount" class="form-control" @bind-value="@newDet.AmountToMove" />
                    <label for="WarehauseId" class="control-label">Warehause</label>
                    <CustomInputSelect id="WarehauseType" @bind-Value="@newDet.WarehauseToMove" class="form-control">
                        @if (warehauses != null)
                        {
                            @foreach (var warehause in warehauses)
                            {
                                <option value="@warehause.Id">@warehause.Name nr.@warehause.WarehauseNumber</option>
                            }
                        }
                    </CustomInputSelect>

                </div>
                <div class="form-group">
                    <h4>@warehauseToMove</h4>
                    <button type="button" class="btn btn-primary" @onclick="() => Move()">Save</button>
                    <button type="button" class="btn btn-danger" @onclick="() => cancel()">Cancel</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>
@code{
    [Parameter]
    public string Id { get; set; }
    private WarehauseDetail warehauseDetails = new WarehauseDetail();
    private WarehauseDetail warehauseToMove;
    private WarehauseDetail newDetail = new WarehauseDetail();
    private Move newDet = new Move();
    private IEnumerable<Warehause> warehauses;


    protected override async Task OnInitializedAsync()
    {
        warehauseDetails = await WarehauseDetailsService.GetWarehauseDetailById(int.Parse(Id));
        warehauses = await WarehauseService.GetAll();
    }

    void cancel()
    {
        navigationManager.NavigateTo("/warehauses");
    }
    protected async Task Move()
    {
        //warehauseToMove is a wearehause to update new amount of linen, newDet.WarehauseToMove is a WarehauseId to move to chosen linen.
        warehauseToMove = (await WarehauseDetailsService.GetDetailsWithQuery(newDet.WarehauseToMove, warehauseDetails.HotelLinenId)).FirstOrDefault();
        if (warehauseToMove != null)
        {
            warehauseToMove.Amount =(ushort)(warehauseToMove.Amount+newDet.AmountToMove);
            await WarehauseDetailsService.UpdateDetails(warehauseToMove);
            warehauseDetails.Amount =(ushort)(warehauseDetails.Amount - newDet.AmountToMove);
            await WarehauseDetailsService.UpdateDetails(warehauseDetails);
            navigationManager.NavigateTo($"/viewWarehauseDetails/{warehauseToMove.WarehauseId}");
        }
        else
        {
            newDetail.HotelLinenId = warehauseDetails.HotelLinenId;
            newDetail.Amount = newDet.AmountToMove;
            newDetail.WarehauseId = newDet.WarehauseToMove;

            await WarehauseDetailsService.CreateDetails(newDetail);
            navigationManager.NavigateTo($"/viewWarehauseDetails/{newDetail.WarehauseId}");
        }

    }

}

