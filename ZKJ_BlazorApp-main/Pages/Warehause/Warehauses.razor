@page "/warehauses"
@attribute [Authorize]
@inject IWarehauseService WarehauseService
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
@using System;
@using System.ComponentModel.DataAnnotations;
@using System.Linq;
@using System.Reflection;



@if (SpinnerVisible == true)
{
    <SfSpinner Visible="true" Type="@SpinnerType.Bootstrap4" Size="100" Label="Data loading"></SfSpinner>
}

@if (WarehauseList != null)
{
    <SfGrid @ref="warehauseGrid" DataSource="@WarehauseList" AllowPaging="true" AllowSorting="true" AllowFiltering="true" Toolbar="Toolbaritems">
        <GridEvents OnToolbarClick="ToolbarClickHandler" RowSelected="RowSelectHandler" OnActionBegin="ActionBeginHandler" TValue="Warehause"></GridEvents>
        <GridPageSettings PageSize="10" PageCount="5" PageSizes="@pagerDropdown"></GridPageSettings>
        <GridFilterSettings Mode="Syncfusion.Blazor.Grids.FilterBarMode.Immediate" Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
        <GridEditSettings Mode="EditMode.Dialog" AllowAdding="true" AllowEditing="true" AllowDeleting="true">
            <HeaderTemplate>
                <span>@GetDialogHeader(context as Warehause)</span>
            </HeaderTemplate>
        </GridEditSettings>

        <GridColumns>
            <GridColumn AllowAdding="false" AllowEditing="false" IsPrimaryKey="true" Field=@nameof(Warehause.Id) HeaderText="ID" Width="0"></GridColumn>
            <GridColumn Field=@nameof(Warehause.WarehauseType) HeaderText="WarehauseType">
                <Template>
                    <span>
                        @GetDisplayName((context as Warehause).WarehauseType)
                    </span>
                </Template>
                <EditTemplate>
                    <span>Warehause Type</span>
                    <SfDropDownList TItem="string" TValue="Models.WarehauseType"
                                    @bind-Value="@((context as Warehause).WarehauseType)"
                                    DataSource="@WarehauseTypesEnumValues">
                    </SfDropDownList>
                </EditTemplate>
            </GridColumn>
            <GridColumn Field=@nameof(Warehause.Name) HeaderText="Name"></GridColumn>
            <GridColumn Field=@nameof(Warehause.WarehauseNumber) HeaderText="Warehause number"></GridColumn>
        </GridColumns>
    </SfGrid>
}


@code {
    private List<Warehause> WarehauseList { get; set; }
    string[] pagerDropdown = new string[] { "All", "5", "10", "15", "20" };
    private List<Object> Toolbaritems = new List<Object>() { "Add", "Edit", "Delete", "Update", "Cancel"
        , new ItemModel() { Align = (Syncfusion.Blazor.Navigations.ItemAlign.Right), Text = "View Details", TooltipText = "View", Id = "View" } };
    public bool SpinnerVisible { get; set; }
    public SfGrid<Warehause> warehauseGrid { get; set; }
    public int Id { get; set; }
    public string[] WarehauseTypesEnumValues = Enum.GetNames(typeof(Models.WarehauseType));

    protected override async Task OnInitializedAsync()
    {
        SpinnerVisible = true;
        WarehauseList = (await WarehauseService.GetAll()).ToList();
        SpinnerVisible = false;

    }

    public string GetDisplayName(Enum enumValue)
    {
        return enumValue.GetType()?
                        .GetMember(enumValue.ToString())?
                        .First()?
                        .GetCustomAttribute<DisplayAttribute>()?
                        .Name;
    }
    public string GetDialogHeader(Warehause warehause)
    {
        if (warehause.Id == 0)
        {
            return "Add New Warehause";
        }
        else
        {
            return $"Edit {warehause.Name} Details";
        }
    }

    public void RowSelectHandler(RowSelectEventArgs<Warehause> argsSelect)
    {
        Id = argsSelect.Data.Id;
    }
    public void ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs selectArgs)
    {

        if (selectArgs.Item.Id == "View")
        {
            if (Id == 0)
            {
                navigationManager.NavigateTo($"/warehauses");
            }
            else
            {
                navigationManager.NavigateTo($"/viewWarehauseDetails/{Id}");

            }
        }
    }
    public async void ActionBeginHandler(ActionEventArgs<Warehause> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            if (args.Action == "Add")
            {
                args.Data.CompanyId = WarehauseList.Select(x => x.CompanyId).First();
                await WarehauseService.CreateWarehause(args.Data);
                WarehauseList = (await WarehauseService.GetAll()).ToList();
                warehauseGrid.Refresh();
            }
            if (args.Action == "Edit")
            {
                args.Data.CompanyId = WarehauseList.Select(x => x.CompanyId).First();
                await WarehauseService.Update(args.Data);
            }

        }
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            await WarehauseService.Delete(args.Data.Id);
        }
    }


}
<style>
    .e-toolbar-item .e-tbar-btn {
        border: solid;
    } 
</style>
 