@page "/addLinenToWarehause/{Id}"
@attribute [Authorize]
@inject IHotelLinenService HotelLinenService
@inject IWarehauseService WarehauseService
@inject IWarehauseDetailsService WarehauseDetailsService
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager

<h1>Add linen to warehause</h1>

<div class="container">
    <div class="row">
        <div class="col-md-4">
            <EditForm Model="detail">
                <div class="form-group">

                    <input type="hidden" @bind-value="@detail.WarehauseId" />
                    <label for="HotelLinenId" class="control-label">HotelLinen</label>
                    <CustomInputSelect id="HotelLinenId" @bind-Value="detail.HotelLinenId" class="form-control">
                        @if (hotelLinens != null)
                        {
                            @foreach (var hotelLinen in hotelLinens)
                            {
                                <option value="@hotelLinen.Id">@hotelLinen.NameWithShortDescription kolor: @hotelLinen.Color</option>
                            }
                        }
                    </CustomInputSelect>
                    <label for="Amount" class="control-label">Amount</label>
                    <input form="Amount" class="form-control" @bind-value="@detail.Amount" />
                </div>
                <div class="form-group">
                    <button type="button" class="btn btn-primary" @onclick="() => AddHotelLinenToWarehause()">Save</button>
                    <button type="button" class="btn btn-danger" @onclick="() => cancel()">Cancel</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>
@code{
    [Parameter]
    public string Id { get; set; }
    private Models.Warehause warehause;
    private Models.WarehauseDetail detail = new WarehauseDetail();
    private IEnumerable<HotelLinen> hotelLinens;

    protected override async Task OnInitializedAsync()
    {
        warehause = await WarehauseService.GetWarehauseById(int.Parse(Id));
        hotelLinens = await HotelLinenService.GetAll();

    }

    protected async Task AddHotelLinenToWarehause()
    {
        detail.WarehauseId = warehause.Id;
        var first = hotelLinens.First();
        if (detail.HotelLinenId == 0)
        {
            detail.HotelLinenId = first.Id;
        }
        var result = (await WarehauseDetailsService.GetDetailsWithQuery(detail.WarehauseId, detail.HotelLinenId)).FirstOrDefault();
        if (result == null)
        {
            await WarehauseDetailsService.CreateDetails(detail);
            navigationManager.NavigateTo("/warehauses");
        }
        else
        {
            navigationManager.NavigateTo("/conflict");
        }

    }

    void cancel()
    {
        navigationManager.NavigateTo("/warehauses");
    }
}