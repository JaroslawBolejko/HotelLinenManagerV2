@page "/invoiceDetails/{Id}"
@attribute [Authorize]
@inject IInvoiceService InvoiceService
@inject ILaundryServiceService ServiceLaundry
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager


<h3>InvoiceDetails</h3>

@if (SpinnerVisible == true)
{
    <SfSpinner Visible="true" Type="@SpinnerType.Bootstrap4" Size="100" Label="Data loading"></SfSpinner>
}

@if (Details != null)
{
    <SfGrid DataSource="@Details" AllowPaging="true" AllowSorting="true" AllowFiltering="true" Toolbar="Toolbaritems">
        <GridEvents OnToolbarClick="ToolbarClickHandler" RowSelected="RowSelectHandler" QueryCellInfo="CustomizeCell"
                    OnActionBegin="ActionBeginHandler" TValue="LaundryService"></GridEvents>
        <GridPageSettings PageSize="10" PageCount="5" PageSizes="@pagerDropdown"></GridPageSettings>
        <GridFilterSettings Mode="FilterBarMode.Immediate" Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
        <GridEditSettings AllowEditing="true" AllowDeleting="true"></GridEditSettings>
        <GridTemplates>
            <DetailTemplate>
                @{
                    var service = (context as LaundryService);
                    <table class="detailtable">
                        <tbody>
                            <tr>
                                <td>
                                    <span style="font-weight: 500;"><b>Total Netto: </b></span> @service.TotalNetto (zł)
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <span style="font-weight: 500;"><b>Total Brutto: </b></span> @service.TotalBrutto (zł)
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <span style="font-weight: 500;"><b>Total Tax: </b></span> @service.TotalTax (zł)
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <span style="font-weight: 500;"><b>Total Weight: </b></span> @service.TotalServiceWeight (kg)
                                </td>
                            </tr>
                        </tbody>
                    </table>
                }
            </DetailTemplate>
        </GridTemplates>
        <GridColumns>
            <GridColumn IsPrimaryKey="true" Field=@nameof(LaundryService.Id) HeaderText="ID" Visible="false"></GridColumn>
            <GridColumn Field=@nameof(LaundryService.Name) HeaderText="Name"></GridColumn>
            <GridColumn Field=@nameof(LaundryService.Number) HeaderText="Number"></GridColumn>
            <GridColumn Field=@nameof(LaundryService.RecievedDate) Format="d" HeaderText="Recieved Date" Type="ColumnType.Date"></GridColumn>
            <GridColumn Field=@nameof(LaundryService.IssuedDate) Format="d" HeaderText="Issued Date" Type="ColumnType.Date"></GridColumn>
        </GridColumns>
    </SfGrid>
}
<br/>


@code {
    [Parameter]
    public string Id { get; set; }
    List<LaundryService> Details { get; set; }
    public bool SpinnerVisible { get; set; }
    public int RowId { get; set; }
    string[] pagerDropdown = new string[] { "All", "5", "10", "15", "20" };
    private List<Object> Toolbaritems = new List<Object>() {"Add" ,"Edit", "Delete", "Update", "Cancel",
        new ItemModel() {CssClass="specyfic", Align = (Syncfusion.Blazor.Navigations.ItemAlign.Right), Text = "Back", TooltipText = "Back", Id = "Back" } };



    protected override async Task OnInitializedAsync()
    {
        SpinnerVisible = true;
        // tu trzeba żeby pobrał tylko, te które dotyczą faktury
        Details = (await ServiceLaundry.GetAllLaundry()).Where(x=>x.InvoiceId == int.Parse(Id)).ToList();
        SpinnerVisible = false;
    }

    public void RowSelectHandler(RowSelectEventArgs<LaundryService> args)
    {
        RowId = args.Data.Id;
    }
    public void ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "Back")
        {

            navigationManager.NavigateTo($"/invoices");

        }

    }

    public async void ActionBeginHandler(ActionEventArgs<LaundryService> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {

            if (args.Action == "Edit")
            {
                await ServiceLaundry.UpdateLaundry(args.Data);
            }

        }
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            await ServiceLaundry.Delete(args.Data.Id);
        }
    }


    public void CustomizeCell(QueryCellInfoEventArgs<LaundryService> args)
    {
        if (args.Column.Field == "IsPaid")
        {
            if (args.Data.IsFinished == true)
            {
                args.Cell.AddClass(new string[] { "true" });
            }
            else
            {
                args.Cell.AddClass(new string[] { "false" });

            }
        }

    }
}
