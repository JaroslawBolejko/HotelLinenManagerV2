@page "/addInvoice/{InvoiceId}"
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
@inject ILaundryServiceService ServiceLaundry
@inject IInvoiceService InvoiceService
@inject ILocalStorageService LocalStorageService
@using Syncfusion.Blazor.Grids


<h3>AddInvoice</h3>

@if (SpinnerVisible == true)
{
    <SfSpinner Visible="true" Type="@SpinnerType.Bootstrap4" Size="100" Label="Data loading"></SfSpinner>
}

@if (Laundries != null)
{
    <SfGrid @ref="laundryGrid" DataSource="@Laundries" AllowSelection="true" AllowPaging="true" AllowSorting="true" AllowFiltering="true" Toolbar="Toolbaritems">
        <GridEvents OnToolbarClick="ToolbarClickHandler" RowSelected="GetSelectedRecords" TValue="LaundryService"></GridEvents>
        <GridPageSettings PageSize="10" PageCount="5" PageSizes="@pagerDropdown"></GridPageSettings>
        <GridFilterSettings Mode="FilterBarMode.Immediate" Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
        <GridEditSettings AllowEditing="true" AllowDeleting="true"></GridEditSettings>
        <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"></GridSelectionSettings>
        <GridColumns>
            <GridColumn IsPrimaryKey="true" Field=@nameof(LaundryService.Id) HeaderText="ID" Visible="false"></GridColumn>
            <GridColumn Field=Company.Name HeaderText="Client Name"></GridColumn>
            <GridColumn Field=@nameof(LaundryService.Number) HeaderText="Laundry Service Number"></GridColumn>
            <GridColumn Field=@nameof(LaundryService.RecievedDate) Format="d" HeaderText="Recieved Date" Type="ColumnType.Date"></GridColumn>
            <GridColumn Field=@nameof(LaundryService.IssuedDate) Format="d" HeaderText="Issued Date" Type="ColumnType.Date"></GridColumn>
            <GridColumn Type="ColumnType.CheckBox" HeaderText="Add To Invoice"></GridColumn>
        </GridColumns>
    </SfGrid>
}

@code {
    [Parameter]
    public string InvoiceId { get; set; }
    private bool SpinnerVisible { get; set; }
    private List<LaundryService> Laundries { get; set; }
    private Invoice Invoice { get; set; }
    string[] pagerDropdown = new string[] { "All", "5", "10", "15", "20" };
    private decimal totalCost;
    private SfGrid<LaundryService> laundryGrid { get; set; }
    private List<Object> Toolbaritems = new List<Object>() { new ItemModel() {Align = (Syncfusion.Blazor.Navigations.ItemAlign.Left),
        Text = "Add all", TooltipText = "Add all", Id = "AddAll" }, new ItemModel() {Align = (Syncfusion.Blazor.Navigations.ItemAlign.Left),
        Text = "Create from Selected", TooltipText = "Finish/Create", Id = "Finish" },
        new ItemModel() {CssClass="specyfic" ,Align = (Syncfusion.Blazor.Navigations.ItemAlign.Right),
        Text = "Cancel/Back", TooltipText = "Cancel/Back", Id = "Cancel" }};

    public List<LaundryService> SelectedLaundryServices { get; set; }

    protected override async Task OnInitializedAsync()
    {
        SpinnerVisible = true;
        Laundries = (await ServiceLaundry.GetAllLaundry()).Where(x => x.InvoiceId == 0).ToList();
        Invoice = await LocalStorageService.GetItem<Invoice>("invoice");
        SpinnerVisible = false;
    }


    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {

        if (args.Item.Id == "AddAll")
        {
            decimal totalBruttoCost = 0;

            foreach (var laundry in Laundries)
            {
                totalBruttoCost += laundry.TotalBrutto;
                laundry.InvoiceId = int.Parse(InvoiceId);
                await ServiceLaundry.UpdateLaundry(laundry);

            }
            Invoice.TotalCost = totalBruttoCost;
            await InvoiceService.UpdateInvoice(Invoice);
            navigationManager.NavigateTo("/invoices");
        }


        if (args.Item.Id == "Cancel")
        {

            await InvoiceService.Delete(int.Parse(InvoiceId));
            navigationManager.NavigateTo("/invoices");

        }

        if (args.Item.Id == "Finish")
        {
            await AddToInvoice();
        }

    }

    public async Task GetSelectedRecords(RowSelectEventArgs<LaundryService> args)
    {


        if (laundryGrid != null)
        {
            SelectedLaundryServices = await this.laundryGrid.GetSelectedRecordsAsync();
            StateHasChanged();
        }

    }

    public async Task AddToInvoice()
    {

        int invoiceId = int.Parse(InvoiceId);

        foreach (var data in SelectedLaundryServices)
        {
            data.InvoiceId = invoiceId;
            await ServiceLaundry.UpdateLaundry(data);
            totalCost += data.TotalBrutto;

        }
        Invoice.TotalCost = totalCost;
        await InvoiceService.UpdateInvoice(Invoice);
        navigationManager.NavigateTo("/invoices");

    }
}
<style>
    .e-toolbar-item .e-tbar-btn {
        border: solid;
    }

    .specyfic.e-toolbar-item .e-tbar-btn {
        background-color: orange;

    }
</style>
