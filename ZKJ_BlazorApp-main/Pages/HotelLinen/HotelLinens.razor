@page "/hotellinens"
@attribute [Authorize]
@inject IHotelLinenService HotelLinenService
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager


@if (SpinnerVisible == true)
{
    <SfSpinner Visible="true" Type="@SpinnerType.Bootstrap4" Size="100" Label="Data loading"></SfSpinner>
}

@if (Linens != null)
{
    <SfGrid @ref="hotelLinenGrid" DataSource="@Linens" AllowPaging="true" AllowSorting="true" AllowFiltering="true" Toolbar="Toolbaritems">
        <GridEvents OnToolbarClick="ToolbarClickHandler" RowSelected="RowSelectHandler" OnActionBegin="ActionBeginHandler" TValue="HotelLinen"></GridEvents>
        <GridPageSettings PageSize="10" PageCount="5" PageSizes="@pagerDropdown"></GridPageSettings>
        <GridFilterSettings Mode="Syncfusion.Blazor.Grids.FilterBarMode.Immediate" Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
        <GridEditSettings Mode="EditMode.Dialog" AllowAdding="true" AllowEditing="true" AllowDeleting="true">
            <HeaderTemplate>
                <span>@GetDialogHeader(context as HotelLinen)</span>
            </HeaderTemplate>
        </GridEditSettings>

        <GridTemplates>
            <DetailTemplate>
                @{
                    var linen = (context as HotelLinen);
                    <table class="detailtable" width="100%">
                        <colgroup>
                            <col width="35%">
                            <col width="35%">
                            <col width="30%">
                        </colgroup>
                        <tbody>
                            <tr>
                                <td>
                                    <span style="font-weight: 500;"><b>Size: </b></span> @linen.Size (cm x cm)
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <span style="font-weight: 500;"><b>Weight: </b></span> @linen.Weight (kg)
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <span style="font-weight: 500;"><b>Price per kilogram: </b></span> @linen.PricePerKg (zł)
                                </td>
                            </tr>
                        </tbody>
                    </table>
                }
            </DetailTemplate>
        </GridTemplates>
        <GridColumns>
            <GridColumn AllowEditing="false" AllowAdding="false" IsPrimaryKey="true" Field=@nameof(HotelLinen.Id) HeaderText="ID" Width="0"></GridColumn>
            <GridColumn AllowEditing="false" AllowAdding="false" Field=@nameof(HotelLinen.CompanyId) HeaderText="CompanyId" Width="0"></GridColumn>
            <GridColumn Field=@nameof(HotelLinen.TypeName) HeaderText="Type">
                <EditTemplate>
                    <span>Type</span>
                    <SfDropDownList  TItem="string" TValue="Models.Type"
                                    @bind-Value="@((context as HotelLinen).TypeName)"
                                    DataSource="@TypesEnumValues">
                    </SfDropDownList>
                </EditTemplate>
            </GridColumn>
            <GridColumn Field=@nameof(HotelLinen.Description) HeaderText="Description"></GridColumn>
            <GridColumn Field=@nameof(HotelLinen.Color) HeaderText="Color"></GridColumn>
            <GridColumn Field=@nameof(HotelLinen.Amount) HeaderText="Base amount"></GridColumn>
            <GridColumn Field=@nameof(HotelLinen.Size) HeaderText="Size" Width="0"></GridColumn>
            <GridColumn Field=@nameof(HotelLinen.Weight) HeaderText="Weight" Width="0"></GridColumn>
            <GridColumn Field=@nameof(HotelLinen.PricePerKg) HeaderText="Price per kg" Width="0"></GridColumn>
        </GridColumns>
    </SfGrid>
}


@code {
    private List<HotelLinen> Linens { get; set; }
    string[] pagerDropdown = new string[] { "All", "5", "10", "15", "20" };
    private List<Object> Toolbaritems = new List<Object>() { "Add", "Edit", "Delete", "Update", "Cancel", new ItemModel() { Text = "View Details", TooltipText = "View", PrefixIcon = "e-click", Id = "View" } };
    public bool SpinnerVisible { get; set; }

    public SfGrid<HotelLinen> hotelLinenGrid { get; set; }
    public int Id { get; set; }

    public string[] TypesEnumValues = Enum.GetNames(typeof(Models.Type));

    protected override async Task OnInitializedAsync()
    {
        SpinnerVisible = true;
        Linens = (await HotelLinenService.GetAll()).ToList();
        SpinnerVisible = false;

    }

    public string GetDialogHeader(HotelLinen hotelLinen)
    {
        if (hotelLinen.Id == 0)
        {
            return "Add New Linen Item";
        }
        else
        {
            return $"Edit {hotelLinen.TypeName} Details";
        }
    }


    public void RowSelectHandler(RowSelectEventArgs<HotelLinen> args)
    {
        // Id = args.Data.HotelLinenTypeId;
    }
    public void ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {

        //if (args.Item.Id == "View")
        //{
        //    if (Id == 0)
        //    {
        //        navigationManager.NavigateTo($"/hotellinens");
        //    }
        //    else
        //    {
        //        navigationManager.NavigateTo($"/viewLinendetails/{Id}");

        //    }
        //}
    }
    public async void ActionBeginHandler(ActionEventArgs<HotelLinen> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            if (args.Action == "Add")
            {
                args.Data.CompanyId = Linens.Select(x => x.CompanyId).First();
                await HotelLinenService.Create(args.Data);
                Linens = (await HotelLinenService.GetAll()).ToList();
                hotelLinenGrid.Refresh();
            }
            if (args.Action == "Edit")
            {
                await HotelLinenService.Update(args.Data);
            }

        }
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            await HotelLinenService.Delete(args.Data.Id);
        }
    }


}