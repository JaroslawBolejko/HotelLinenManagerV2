@page "/hotellinens"
@attribute [Authorize]
@inject IHotelLinenService HotelLinenService
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager


@if (SpinnerVisible == true)
{
    <SfSpinner Visible="true" Type="@SpinnerType.Bootstrap4" Size="100" Label="Data loading"></SfSpinner>
}

@if (Linens != null)
{
    <SfGrid @ref="hotelLinenGrid" DataSource="@Linens" AllowPaging="true" AllowSorting="true" AllowFiltering="true" Toolbar="Toolbaritems">
        <GridEvents OnToolbarClick="ToolbarClickHandler" RowSelected="RowSelectHandler" OnActionBegin="ActionBeginHandler" TValue="HotelLinen"></GridEvents>
        <GridPageSettings PageSize="10" PageCount="5" PageSizes="@pagerDropdown"></GridPageSettings>
        <GridFilterSettings Mode="FilterBarMode.Immediate" Type="FilterType.Menu"></GridFilterSettings>
        <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true"></GridEditSettings>

        <GridColumns>
            <GridColumn Visible="false" Field=@nameof(HotelLinen.Id) HeaderText="ID"></GridColumn>
            <GridColumn Field=@nameof(HotelLinen.NameWithShortDescription) HeaderText="Name with short description"></GridColumn>
            <GridColumn Field=@nameof(HotelLinen.Color) HeaderText="Color"></GridColumn>
            <GridColumn Field=@nameof(HotelLinen.Amount) HeaderText="Amount"></GridColumn>

        </GridColumns>
    </SfGrid>
}


@code {
    private List<HotelLinen> Linens { get; set; }
    string[] pagerDropdown = new string[] { "All", "5", "10", "15", "20" };
    private List<Object> Toolbaritems = new List<Object>() { "Edit", "Delete", "Update", "Cancel", new ItemModel() { Text = "View Details", TooltipText = "View", PrefixIcon = "e-click", Id = "View" } };
    public bool SpinnerVisible { get; set; }
    public SfGrid<HotelLinen> hotelLinenGrid { get; set; }

    protected override async Task OnInitializedAsync()
    {
        SpinnerVisible = true;
        Linens = (await HotelLinenService.GetAll()).ToList();
        SpinnerVisible = false;

    }

    protected async Task DeleteHotelLinen(int id)
    {
        await HotelLinenService.Delete(id);
        Linens = (await HotelLinenService.GetAll()).ToList();
    }
    // RowSelectetHandler potrzebny mi jest do przycisku ViewDetails, na razie nie działa potrzeba Normalizacji klasy HotelLinen i hotelLinenType
    public void RowSelectHandler(RowSelectEventArgs<HotelLinen> args)
    {
        //Id = args.Data.Id;
    }
    public void ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {

        if (args.Item.Id == "View")
        {

            // navigationManager.NavigateTo($"/viewHotelLinenDetails/{Id}");
        }
    }

    public async void ActionBeginHandler(ActionEventArgs<HotelLinen> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            if (args.Action == "Add")
            {
                await HotelLinenService.Create(args.Data);
                Linens = (await HotelLinenService.GetAll()).ToList();
                hotelLinenGrid.Refresh();
            }
            if (args.Action == "Edit")
            {
                await HotelLinenService.Update(args.Data);
            }

        }
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            await HotelLinenService.Delete(args.Data.Id);
        }
    }


}